<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
                    xmlns:dxcr="http://schemas.devexpress.com/winfx/2008/xaml/charts/rangecontrolclient"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxfui="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui"
                    xmlns:dxfuit="http://schemas.devexpress.com/winfx/2008/xaml/core/filteringui/themekeys"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
                    xmlns:dxpg="http://schemas.devexpress.com/winfx/2008/xaml/pivotgrid"
                    xmlns:dxpgi="http://schemas.devexpress.com/winfx/2008/xaml/pivotgrid/internal"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:themes="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <themes:ObjectToStringConverter x:Key="objectToStringConverter"/>

    <themes:BoolToObjectConverter x:Key="boolToObjectConverterFPW"
                                  FalseValue="0"
                                  TrueValue="16"/>

    <dxpgi:PivotGridFieldDataConverter x:Key="PivotGridFieldDataConverter"/>

    <dxpgi:FieldListActualAreaToAreaTextConverter x:Key="fieldListActualAreaToAreaTextConverter"/>

    <themes:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>

    <dxpgi:ObjectToThicknessConverter x:Key="headerImageMarginConverter"
                                      NotNullValue="0,0,3,0"
                                      NullValue="0"/>

    <ControlTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=FilterButtonTemplate}" TargetType="{x:Type dxe:PopupBaseEdit}">
        <ToggleButton Focusable="False"
                      HorizontalAlignment="Left"
                      IsChecked="{Binding Path=IsPopupOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                      IsTabStop="False"
                      Template="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=FilterTemplate}}"
                      VerticalAlignment="Top"/>
    </ControlTemplate>

    <DataTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=FilterPopupTemplate}">
        <dxfui:ExcelStyleFilterElement x:Name="PART_FilterElement"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=ContentTemplate}">
        <DockPanel>
            <Image HorizontalAlignment="Left"
                   Margin="{Binding Path=ImageSource, Mode=OneWay, Converter={StaticResource headerImageMarginConverter}}"
                   Source="{Binding Path=ImageSource, Mode=OneWay}"
                   Stretch="None"
                   VerticalAlignment="Center"/>
            <TextBlock Name="textBlock"
                       Style="{Binding Path=ActualHeaderContentStyle}"
                       Text="{Binding Path=DisplayText, Mode=OneWay}"
                       TextTrimming="CharacterEllipsis"/>
        </DockPanel>
    </DataTemplate>

    <DataTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=ListContentTemplate}">
        <DockPanel>
            <Image HorizontalAlignment="Left"
                   Margin="{Binding Path=ImageSource, Mode=OneWay, Converter={StaticResource headerImageMarginConverter}}"
                   Source="{Binding Path=ImageSource, Mode=OneWay}"
                   Stretch="None"
                   VerticalAlignment="Center"/>
            <TextBlock Name="textBlock"
                       Style="{Binding Path=ActualHeaderContentStyle}"
                       Text="{Binding Path=DisplayText, Mode=OneWay}"
                       TextTrimming="CharacterEllipsis"/>
        </DockPanel>
    </DataTemplate>

    <DataTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=DragElementTemplate}">
        <Grid DataContext="{Binding Content.Content, RelativeSource={RelativeSource TemplatedParent}}"
              HorizontalAlignment="Left"
              VerticalAlignment="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <dxpgi:DragFieldHeader dxpgi:FieldHeadersBase.FieldListArea="{Binding Path=(dxpgi:FieldHeadersBase.FieldListArea), RelativeSource={RelativeSource TemplatedParent}}"
                                   Field="{Binding Content.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                   Height="{Binding Path=(dxpgi:FieldHeader.DragElementSize).Height, RelativeSource={RelativeSource TemplatedParent}}"
                                   Width="{Binding Path=(dxpgi:FieldHeader.DragElementSize).Width, RelativeSource={RelativeSource TemplatedParent}}"/>
            <themes:DragIconControl x:Name="dropIndicator"
                                    DragType="Remove"
                                    Grid.Column="1"
                                    Grid.Row="1"
                                    Margin="-12,-12,0,0">
                <themes:DragIconControl.Opacity>
                    <Binding Path="(dxpgi:DragFieldHeader.CanHide)" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                            <themes:BoolToObjectConverter FalseValue="0" TrueValue="1"/>
                        </Binding.Converter>
                    </Binding>
                </themes:DragIconControl.Opacity>
            </themes:DragIconControl>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=GroupDragElementTemplate}">
        <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <dxpgi:DragGroupHeader DataContext="{Binding Content.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                   Group="{Binding Content.Content, RelativeSource={RelativeSource TemplatedParent}}"
                                   Height="{Binding Path=(dxpgi:FieldHeader.DragElementSize).Height, RelativeSource={RelativeSource TemplatedParent}}"
                                   Width="{Binding Path=(dxpgi:FieldHeader.DragElementSize).Width, RelativeSource={RelativeSource TemplatedParent}}"/>
            <themes:DragIconControl x:Name="dropIndicator"
                                    DragType="Remove"
                                    Grid.Column="1"
                                    Grid.Row="1"
                                    Margin="-12,-12,0,0">
                <themes:DragIconControl.Opacity>
                    <Binding Path="(dxpgi:DragFieldHeader.CanHide)" RelativeSource="{RelativeSource TemplatedParent}">
                        <Binding.Converter>
                            <themes:BoolToObjectConverter FalseValue="0" TrueValue="1"/>
                        </Binding.Converter>
                    </Binding>
                </themes:DragIconControl.Opacity>
            </themes:DragIconControl>
        </Grid>
    </DataTemplate>

    <ControlTemplate x:Key="ExcelStylePopupContentTemplate">
        <dxg:ColumnFilteringUIContentControl ApplyFilterImmediately="{Binding ApplyFilterImmediately}" Content="{Binding}"/>
    </ControlTemplate>

    <Style x:Key="FieldLabelStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False">
                <Setter Property="Opacity" Value="0.65"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RangeTextEditStyle" TargetType="dxe:TextEdit">
        <Setter Property="MinWidth" Value="60"/>
        <Setter Property="Margin" Value="8,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="MaskType" Value="Numeric"/>
        <Setter Property="DisplayFormatString" Value="{Binding ArgumentLabelFormatString}"/>
        <Setter Property="dxe:NumericMaskOptions.AlwaysShowDecimalSeparator" Value="False"/>
    </Style>

    <ControlTemplate x:Key="SummaryPopupContentTemplate">
        <Grid Loaded="{DXEvent Handler='Loaded()'}" Margin="13">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="{dxpgi:PivotGridStringId StringId=SummaryFilterRangeFrom}" VerticalAlignment="Center"/>
                <dxe:TextEdit EditValue="{Binding SelectionStart, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource RangeTextEditStyle}"/>
                <TextBlock Text="{dxpgi:PivotGridStringId StringId=SummaryFilterRangeTo}" VerticalAlignment="Center"/>
                <dxe:TextEdit EditValue="{Binding SelectionEnd, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource RangeTextEditStyle}"/>
            </StackPanel>
            <dxe:RangeControl AllowImmediateRangeUpdate="True"
                              Grid.Row="1"
                              Margin="0,10"
                              MinHeight="130"
                              RangeEnd="{Binding End}"
                              RangeStart="{Binding Start}"
                              ResetRangesOnClientItemsSourceChanged="False"
                              SelectionRangeEnd="{Binding SelectionEnd, Mode=TwoWay}"
                              SelectionRangeStart="{Binding SelectionStart, Mode=TwoWay}"
                              ShowLabels="False"
                              ShowRangeBar="True"
                              ShowRangeThumbs="True"
                              VisibleRangeEnd="{Binding End}"
                              VisibleRangeStart="{Binding Start}">
                <dxcr:NumericChartRangeControlClient ArgumentDataMember="Step"
                                                     ArgumentLabelFormatString="{Binding ArgumentLabelFormatString}"
                                                     GridAlignment="{Binding RangeGridAlignment}"
                                                     GridLinesBrush="#33000000"
                                                     GridSpacing="1"
                                                     ItemsSource="{Binding ItemsSource}"
                                                     SnapAlignment="{Binding RangeSnapAlignment}"
                                                     ValueDataMember="Value"
                                                     cs:id="NumericChartRangeControlClient_0000">
                    <dxcr:NumericChartRangeControlClient.View>
                        <dxcr:RangeControlClientBarView/>
                    </dxcr:NumericChartRangeControlClient.View>
                </dxcr:NumericChartRangeControlClient>
            </dxe:RangeControl>
            <Grid Grid.Row="2" Margin="0,0,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="13*"/>
                    <ColumnDefinition Width="7*"/>
                    <ColumnDefinition Width="16*"/>
                </Grid.ColumnDefinitions>
                <dxe:CheckEdit Name="levelCheckBox"
                               Content="{dxpgi:PivotGridStringId StringId=SummaryFilterApplyToSpecificLevel}"
                               IsChecked="{Binding SpecificLevel, Mode=TwoWay}"/>
                <TextBlock Grid.Column="1"
                           IsEnabled="{Binding RowFieldSelectionEnabled}"
                           Style="{StaticResource FieldLabelStyle}"
                           Text="{dxpgi:PivotGridStringId StringId=SummaryFilterRowField}"/>
                <TextBlock Grid.Column="1"
                           Grid.Row="1"
                           IsEnabled="{Binding ColumnFieldSelectionEnabled}"
                           Style="{StaticResource FieldLabelStyle}"
                           Text="{dxpgi:PivotGridStringId StringId=SummaryFilterColumnField}"/>
                <dxe:ComboBoxEdit Name="rowSelector"
                                  Grid.Column="2"
                                  IsEnabled="{Binding RowFieldSelectionEnabled}"
                                  IsTextEditable="False"
                                  ItemsSource="{Binding RowFieldSource}"
                                  Margin="0,4"
                                  SelectedItem="{Binding RowField, Mode=TwoWay}">
                    <dxe:ComboBoxEdit.ItemContainerStyle>
                        <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=http://schemas.devexpress.com/winfx/2008/xaml/editors.ComboBoxEditItem}" TargetType="dxe:ComboBoxEditItem">
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding}" Value="{dxpgi:PivotGridStringId StringId=GrandTotal}"/>
                                        <Condition Binding="{Binding ElementName=columnSelector, Path=SelectedItem}" Value="{dxpgi:PivotGridStringId StringId=GrandTotal}"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Setter Property="Opacity" Value="0.65"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </dxe:ComboBoxEdit.ItemContainerStyle>
                </dxe:ComboBoxEdit>
                <dxe:ComboBoxEdit Name="columnSelector"
                                  Grid.Column="2"
                                  Grid.Row="1"
                                  IsEnabled="{Binding ColumnFieldSelectionEnabled}"
                                  IsTextEditable="False"
                                  ItemsSource="{Binding ColumnFieldSource}"
                                  Margin="0,4"
                                  SelectedItem="{Binding ColumnField, Mode=TwoWay}">
                    <dxe:ComboBoxEdit.ItemContainerStyle>
                        <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=http://schemas.devexpress.com/winfx/2008/xaml/editors.ComboBoxEditItem}" TargetType="dxe:ComboBoxEditItem">
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding}" Value="{dxpgi:PivotGridStringId StringId=GrandTotal}"/>
                                        <Condition Binding="{Binding ElementName=rowSelector, Path=SelectedItem}" Value="{dxpgi:PivotGridStringId StringId=GrandTotal}"/>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.Setters>
                                        <Setter Property="IsEnabled" Value="False"/>
                                        <Setter Property="Opacity" Value="0.65"/>
                                    </MultiDataTrigger.Setters>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </dxe:ComboBoxEdit.ItemContainerStyle>
                </dxe:ComboBoxEdit>
            </Grid>
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="SummaryPopupTemplate">
        <dxe:PopupBaseEdit x:Name="PART_FilterPopupEdit"
                           ClosePopupOnLostFocus="False"
                           IgnorePopupSizeConstraints="True"
                           IsPopupOpen="{Binding Path=(dxpgi:FieldHeader.Header).IsPopupOpen, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
                           PopupBottomAreaTemplate="{DynamicResource {dxfuit:ExcelStyleFilterElementThemeKey ResourceKey=PopupBottomAreaTemplate}}"
                           PopupClosed="{DXEvent Handler='Closed(@sender, @args)'}"
                           PopupContentTemplate="{StaticResource SummaryPopupContentTemplate}"
                           PopupFooterButtons="OkCancel"
                           PopupHeight="300"
                           PopupMinHeight="300"
                           PopupMinWidth="450"
                           PopupWidth="450"
                           ShowSizeGrip="True"
                           Template="{Binding Path=(dxpgi:FieldHeader.Header).FilterButtonTemplate, RelativeSource={RelativeSource Self}}"
                           VerticalAlignment="Top"
                           Visibility="{Binding Path=(dxpgi:FieldHeader.Header).IsFilterButtonVisible, RelativeSource={RelativeSource Self}}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxpgi:FieldHeader.Header).(dx:ThemeManager.IsTouchlineTheme), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="PopupHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupMinHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="560"/>
                <Setter Property="PopupMinWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="560"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxpgi:FieldHeader.Header).(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="PopupHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupMinHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="560"/>
                <Setter Property="PopupMinWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="560"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="FilterPopupLegacyTemplate">
        <dxpgi:FieldPopupPlaceholder DataContext="{Binding Path=(dxpgi:FieldHeader.Header), RelativeSource={RelativeSource Self}}"
                                     Field="{Binding Field}"
                                     VerticalAlignment="Top"
                                     Visibility="{Binding Path=IsFilterButtonVisible}"/>
    </DataTemplate>

    <ControlTemplate x:Key="EmptyBottomAreaTemplate"/>

    <DataTemplate x:Key="FilterPopupExcelTemplate">
        <dxe:PopupBaseEdit x:Name="PART_FilterPopupEdit"
                           IgnorePopupSizeConstraints="True"
                           IsPopupOpen="{Binding Path=(dxpgi:FieldHeader.Header).IsPopupOpen, RelativeSource={RelativeSource Self}, Mode=TwoWay}"
                           PopupBottomAreaTemplate="{DynamicResource {dxfuit:ExcelStyleFilterElementThemeKey ResourceKey=PopupBottomAreaTemplate}}"
                           PopupContentTemplate="{StaticResource ExcelStylePopupContentTemplate}"
                           PopupHeight="310"
                           PopupMinHeight="310"
                           PopupMinWidth="260"
                           PopupWidth="260"
                           ShowSizeGrip="True"
                           Template="{Binding Path=(dxpgi:FieldHeader.Header).FilterButtonTemplate, RelativeSource={RelativeSource Self}}"
                           VerticalAlignment="Top"
                           Visibility="{Binding Path=(dxpgi:FieldHeader.Header).IsFilterButtonVisible, RelativeSource={RelativeSource Self}}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxpgi:FieldHeader.Header).(dx:ThemeManager.IsTouchlineTheme), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="PopupHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupMinHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="320"/>
                <Setter Property="PopupMinWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="320"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxpgi:FieldHeader.Header).(dx:ThemeManager.IsTouchEnabled), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="PopupHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupMinHeight"
                        TargetName="PART_FilterPopupEdit"
                        Value="390"/>
                <Setter Property="PopupWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="320"/>
                <Setter Property="PopupMinWidth"
                        TargetName="PART_FilterPopupEdit"
                        Value="320"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ApplyFilterImmediately}" Value="False">
                <Setter Property="PopupFooterButtons"
                        TargetName="PART_FilterPopupEdit"
                        Value="OkCancel"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <dxpgi:FilterPopupTemplateSelector x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=FilterPopupTemplateSelector}"
                                       ExcelTemplate="{StaticResource FilterPopupExcelTemplate}"
                                       LegacyTemplate="{StaticResource FilterPopupLegacyTemplate}"
                                       SummaryTemplate="{StaticResource SummaryPopupTemplate}"/>

    <Style x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=ButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="ClickMode" Value="Release"/>
        <Setter Property="Button.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <dxpgi:FieldHeaderContentControl x:Name="PART_HeaderContentControl"
                                                         dxpgi:FieldHeadersBase.FieldListArea="{Binding Path=(dxpgi:FieldHeadersBase.FieldListArea), RelativeSource={RelativeSource TemplatedParent}}"
                                                         Foreground="{DynamicResource {dxpgi:AppearanceThemeKey ResourceKey=HeaderForeground}}"
                                                         IsMouseOverOverride="{TemplateBinding IsMouseOver}"
                                                         IsPressed="{TemplateBinding IsPressed}"
                                                         IsTabStop="False"
                                                         Template="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=ButtonContentTemplate}}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Column="0" HorizontalAlignment="Left">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Border Name="border2"
                                            DataContext="{Binding Content, Converter={StaticResource PivotGridFieldDataConverter}}"
                                            Grid.Column="0">
                                        <dxpgi:FieldHeaderContentPresenter x:Name="HeaderContentPresenter"
                                                                           Content="{Binding}"
                                                                           dxpgi:FieldHeadersBase.FieldListArea="{Binding Path=(dxpgi:FieldHeadersBase.FieldListArea), RelativeSource={RelativeSource TemplatedParent}}"
                                                                           Field="{Binding Path=(dxpgi:FieldHeader.Field), RelativeSource={RelativeSource TemplatedParent}}"
                                                                           MinHeight="13"
                                                                           RecognizesAccessKey="true"/>
                                    </Border>
                                    <Border Grid.Column="1" Width="{Binding CanFilterButtonVisible, Converter={StaticResource boolToObjectConverterFPW}}">
                                        <ContentPresenter Content="{Binding Path=PopupContext}" ContentTemplateSelector="{Binding Path=(dxpgi:FieldHeader.Header).FilterPopupTemplateSelector, RelativeSource={RelativeSource Self}}"/>
                                    </Border>
                                </Grid>
                                <ContentControl x:Name="SortUp"
                                                Grid.Column="1"
                                                Style="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=SortArrowUpStyle}}"
                                                Template="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=SortArrowUpTemplate}}"
                                                Visibility="{Binding Path=IsSortUpButtonVisible}"/>
                                <ContentControl x:Name="SortDown"
                                                Grid.Column="1"
                                                Style="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=SortArrowDownStyle}}"
                                                Template="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=SortArrowDownTemplate}}"
                                                Visibility="{Binding Path=IsSortDownButtonVisible}"/>
                            </Grid>
                        </dxpgi:FieldHeaderContentControl>
                        <Border Name="PART_DTBorder"
                                Background="Red"
                                Opacity="0.3"
                                Visibility="Collapsed"
                                cs:id="Border_0000"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOverOverride"
                                 SourceName="PART_HeaderContentControl"
                                 Value="True">
                            <Setter Property="Foreground"
                                    TargetName="PART_HeaderContentControl"
                                    Value="{DynamicResource {dxpgi:AppearanceThemeKey ResourceKey=HeaderMouseOverForeground}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=FieldHeaderTemplate}" TargetType="{x:Type dxpgi:FieldHeader}">
        <themes:SimplePanel themes:DragManager.IsStartDragPlace="false">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Cursor">
                    <VisualState x:Name="NormalCursor"/>
                    <VisualState x:Name="HandCursor">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="PART_HeaderButton"
                                                           Storyboard.TargetProperty="Cursor">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Cursor>Hand</Cursor>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Border Name="PART_PreviousDropPlace"
                        Background="Transparent"
                        dxpgi:FieldHeadersBase.DropPlace="Previous"
                        cs:id="Border_0000"/>
                <Border Name="PART_NextDropPlace"
                        Background="Transparent"
                        dxpgi:FieldHeadersBase.DropPlace="Next"
                        Grid.Column="1"
                        cs:id="Border_0001"/>
            </Grid>
            <Border x:Name="outerBorder">
                <Button Name="PART_HeaderButton"
                        ClickMode="Release"
                        Command="{TemplateBinding ChangeFieldSortOrder}"
                        CommandParameter="{Binding Path=(dxpgi:FieldHeader.Field), RelativeSource={RelativeSource TemplatedParent}}"
                        DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                        dxpgi:FieldHeader.Field="{Binding Path=(dxpgi:FieldHeader.Field), RelativeSource={RelativeSource TemplatedParent}}"
                        dxpgi:FieldHeadersBase.FieldListArea="{Binding Path=(dxpgi:FieldHeadersBase.FieldListArea), RelativeSource={RelativeSource TemplatedParent}}"
                        Focusable="False"
                        IsTabStop="False"
                        Margin="{TemplateBinding Padding}"
                        SnapsToDevicePixels="True"
                        Style="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=ButtonStyle}}"
                        themes:DragManager.IsStartDragPlace="true"
                        VerticalAlignment="Top"/>
            </Border>
        </themes:SimplePanel>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=InnerGroupHeaderTemplate}" TargetType="{x:Type dxpgi:FieldHeader}">
        <!--<dx:SimplePanel dx:DragManager.IsStartDragPlace="false">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Border Name="PART_PreviousDropPlace" Background="Transparent" dxpgi:FieldHeadersBase.DropPlace="Previous"/>
                        <Border Name="PART_NextDropPlace" Grid.Column="1" Background="Transparent" dxpgi:FieldHeadersBase.DropPlace="Next"/>
                    </Grid>-->
        <Border x:Name="outerBorder">
            <Button Name="PART_HeaderButton"
                    Command="{Binding ChangeFieldSortOrder, RelativeSource={RelativeSource TemplatedParent}, Mode=OneTime}"
                    CommandParameter="{Binding Path=(dxpgi:FieldHeader.Field), RelativeSource={RelativeSource TemplatedParent}}"
                    DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                    dxpgi:FieldHeader.Field="{Binding Path=(dxpgi:FieldHeader.Field), RelativeSource={RelativeSource TemplatedParent}}"
                    dxpgi:FieldHeadersBase.FieldListArea="{Binding Path=(dxpgi:FieldHeadersBase.FieldListArea), RelativeSource={RelativeSource TemplatedParent}}"
                    Focusable="False"
                    IsTabStop="False"
                    Margin="{TemplateBinding Padding}"
                    SnapsToDevicePixels="True"
                    Style="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=ButtonStyle}}"
                    themes:DragManager.IsStartDragPlace="true"
                    VerticalAlignment="Top"/>
        </Border>
        <!--</dx:SimplePanel>-->
    </ControlTemplate>

    <ControlTemplate x:Key="{dxpgi:FieldHeaderThemeKey ResourceKey=GroupHeaderTemplate}" TargetType="{x:Type dxpgi:GroupHeader}">
        <themes:SimplePanel themes:DragManager.IsStartDragPlace="false">
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Cursor">
                    <VisualState x:Name="NormalCursor"/>
                    <VisualState x:Name="HandCursor">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                           Storyboard.TargetName="outerBorder"
                                                           Storyboard.TargetProperty="Cursor">
                                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Cursor>Hand</Cursor>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Border Name="PART_PreviousDropPlace"
                        Background="Transparent"
                        dxpgi:FieldHeadersBase.DropPlace="Previous"
                        cs:id="Border_0000"/>
                <Border Name="PART_NextDropPlace"
                        Background="Transparent"
                        dxpgi:FieldHeadersBase.DropPlace="Next"
                        Grid.Column="1"
                        cs:id="Border_0001"/>
            </Grid>
            <Border x:Name="outerBorder">
                <ContentControl Name="PART_HeaderButton"
                                DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True"
                                Template="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=GroupContentTemplate}}"
                                VerticalAlignment="Top">
                    <Grid x:Name="PART_Panel"
                          Background="Transparent"
                          cs:id="Grid_0000"/>
                </ContentControl>
            </Border>
        </themes:SimplePanel>
    </ControlTemplate>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.PivotGrid.Internal.FieldHeaders}" TargetType="{x:Type dxpgi:FieldHeaders}">
        <Setter Property="dxpg:PivotGridPopupMenu.GridMenuType" Value="HeadersArea"/>
        <Setter Property="dxb:BarManager.DXContextMenu" Value="{Binding Path=(dxpg:PivotGridControl.PivotGrid).GridMenu, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxpgi:FieldHeaders}">
                    <ContentControl x:Name="PART_Container" Template="{TemplateBinding ContentTemplate}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="EmptyStates">
                                <VisualState Name="NonEmpty"/>
                                <VisualState Name="FullEmpty">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PART_Panel"
                                                                       Storyboard.TargetProperty="(FrameworkElement.VerticalAlignment)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <VerticalAlignment>Stretch</VerticalAlignment>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Empty">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PART_EmptyText"
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PART_Panel"
                                                                       Storyboard.TargetProperty="(FrameworkElement.VerticalAlignment)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <VerticalAlignment>Stretch</VerticalAlignment>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid Margin="{TemplateBinding Padding}">
                            <dxpgi:FieldHeadersPanel x:Name="PART_Panel"
                                                     Background="Transparent"
                                                     HorizontalAlignment="Stretch"
                                                     MeasureMode="{TemplateBinding MeasureMode}"
                                                     SkipWidth="{TemplateBinding LeftPixels}"
                                                     themes:DragManager.DropTargetFactory="{dxpgi:PivotGridDropTargetFactory}"
                                                     VerticalAlignment="{TemplateBinding HeadersVAlignment}"
                                                     cs:id="FieldHeadersPanel_0000"/>
                            <themes:SimplePanel VerticalAlignment="Center" Visibility="{Binding Path=IsCutted, ElementName=PART_Panel, Converter={StaticResource ResourceKey=boolToVisibilityConverter}}">
                                <themes:XPFContentControl x:Name="CuttedContentText" HorizontalAlignment="Center">
                                    <TextBlock Foreground="{DynamicResource ResourceKey={dxpgi:AppearanceThemeKey ResourceKey=DataAreaCuttedTextForeground}}"
                                               HorizontalAlignment="Center"
                                               Padding="0"
                                               Text="{dxpgi:PivotGridStringId StringId=PrintDesignerDataHeaders}"
                                               TextWrapping="NoWrap"
                                               VerticalAlignment="Center">
                                        <!--BEGIN WPF-->
                                        <TextBlock.TextTrimming>CharacterEllipsis</TextBlock.TextTrimming>
                                        <!--END WPF-->
                                    </TextBlock>
                                </themes:XPFContentControl>
                                <!--BEGIN TOSLONLY REPLACE 'ActualWidth'ActualWidthCore'-->
                                <Line Height="2"
                                      HorizontalAlignment="Center"
                                      Margin="0,0,0,0"
                                      Stroke="{DynamicResource ResourceKey={dxpgi:AppearanceThemeKey ResourceKey=DataAreaCuttedTextForeground}}"
                                      StrokeDashArray="1 1"
                                      StrokeThickness="2"
                                      VerticalAlignment="Bottom"
                                      X2="{Binding ActualWidth, ElementName=CuttedContentText}"
                                      Y1="1"
                                      Y2="1">
                                    <Line.RenderTransform>
                                        <ScaleTransform ScaleY="0.5"/>
                                    </Line.RenderTransform>
                                </Line>
                                <!--END TOSLONLY REPLACE 'ActualWidth'ActualWidthCore'-->
                            </themes:SimplePanel>
                            <dxe:TextEdit x:Name="PART_EmptyText"
                                          EditMode="InplaceInactive"
                                          EditValue="{Binding ActualArea, Converter={StaticResource  ResourceKey=fieldListActualAreaToAreaTextConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                          Foreground="{TemplateBinding Foreground}"
                                          HorizontalAlignment="{TemplateBinding EmptyTextHAlignment}"
                                          Style="{DynamicResource {dxpgi:FieldHeaderThemeKey ResourceKey=HeaderEmptyTextStyle}}"
                                          VerticalAlignment="{TemplateBinding EmptyTextVAlignment}"
                                          Visibility="Collapsed"/>
                            <themes:BestFitDecorator x:Name="PART_HeaderBestFitControlDecorator"
                                                     Height="0"
                                                     Width="0"/>
                        </Grid>
                    </ContentControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxpgi:AppearanceThemeKey ResourceKey=HeaderEmptyTextForeground}}"/>
    </Style>

</ResourceDictionary>