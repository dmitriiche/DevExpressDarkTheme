<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dasboardthemes="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/themekeys"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
                    xmlns:dxct="http://schemas.devexpress.com/winfx/2008/xaml/charts/themekeys"
                    xmlns:dxdash="http://schemas.devexpress.com/winfx/2008/xaml/dashboard"
                    xmlns:dxdashi="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/internal"
                    xmlns:dxdasht="http://schemas.devexpress.com/winfx/2008/xaml/dashboard/themekeys"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <dxc:BrushOverlayConverter x:Key="brushOverlayConverter"/>

    <dxdashi:EventToCommandConverter x:Key="EventToCommandConverter"/>

    <Style x:Key="{dxdasht:PieItemThemeKey ResourceKey=ChartStyle}" TargetType="{x:Type dxc:ChartControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Padding" Value="0,0,0,8"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="SelectionMode" Value="None"/>
        <Setter Property="AutoLayout" Value="False"/>
        <Setter Property="Background"
                Value="Transparent"
                cs:id="Setter_0000"/>
        <Setter Property="BorderBrush"
                Value="Transparent"
                cs:id="Setter_0001"/>
        <Setter Property="CrosshairOptions" Value="{Binding CrosshairOptions}"/>
        <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl>
                        <dxmvvm:EventToCommand Command="{Binding OnCustomDrawSeriesPointCommand}"
                                               EventArgsConverter="{StaticResource EventToCommandConverter}"
                                               EventName="CustomDrawSeriesPoint"
                                               PassEventArgsToCommand="True"/>
                        <dxmvvm:EventToCommand Command="{Binding OnBoundDataChangedCommand}"
                                               EventArgsConverter="{StaticResource EventToCommandConverter}"
                                               EventName="BoundDataChanged"
                                               PassEventArgsToCommand="True"/>
                        <dxmvvm:EventToCommand Command="{Binding OnSizeChangedCommand}"
                                               EventArgsConverter="{StaticResource EventToCommandConverter}"
                                               EventName="SizeChanged"
                                               PassEventArgsToCommand="True"/>
                        <dxdashi:ChartItemBehavior DiagramTemplate="{DynamicResource {dxdasht:PieItemThemeKey ResourceKey=ChartDiagramTemplate}}"/>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <!-- //TODO: check theming -->
            <ControlTemplate x:Key="{dxct:ChartControlThemeKey ResourceKey=ChartWrapperTemplate}" TargetType="ContentControl">
                <Border x:Name="OutsideBorder"
                        Background="{TemplateBinding BorderBrush}"
                        CornerRadius="4"
                        Padding="{TemplateBinding BorderThickness}">
                    <Border x:Name="InsideBorder"
                            Background="{TemplateBinding Background}"
                            CornerRadius="3"
                            Padding="{TemplateBinding Padding}">
                        <Grid>
                            <Border x:Name="highlight"
                                    Background="{DynamicResource {dasboardthemes:PieItemThemeKey ResourceKey=PieHighlightedBackgroundBrush}}"
                                    BorderBrush="{DynamicResource {dasboardthemes:PieItemThemeKey ResourceKey=PieHighlightedBorderBrush}}"
                                    BorderThickness="1"
                                    CornerRadius="{DynamicResource {dxdasht:PieItemThemeKey ResourceKey=PieBackgroundCornerRadius}}"
                                    IsHitTestVisible="False"
                                    Visibility="{DXBinding 'IsHighlighted || IsSelected ? `Visible` : `Collapsed`'}"/>
                            <dxc:ChartContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Grid>
                    </Border>
                </Border>
                <ControlTemplate.Triggers>
                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                        <Setter Property="Background"
                                TargetName="highlight"
                                Value="{DynamicResource {dxdasht:DashboardControlThemeKey ResourceKey=SelectedItemBackground}}"/>
                        <Setter Property="BorderBrush"
                                TargetName="highlight"
                                Value="{DynamicResource {dxdasht:DashboardControlThemeKey ResourceKey=SelectedItemBorder}}"/>
                    </DataTrigger>
                    <Trigger Property="Background" Value="{x:Null}">
                        <Setter Property="Background"
                                TargetName="OutsideBorder"
                                Value="{x:Null}"/>
                        <Setter Property="Background"
                                TargetName="InsideBorder"
                                Value="{x:Null}"/>
                        <Setter Property="CornerRadius"
                                TargetName="OutsideBorder"
                                Value="0,0,0,0"/>
                        <Setter Property="Padding"
                                TargetName="OutsideBorder"
                                Value="0,0,0,0"/>
                        <Setter Property="CornerRadius"
                                TargetName="InsideBorder"
                                Value="0,0,0,0"/>
                    </Trigger>
                    <Trigger Property="BorderThickness" Value="0,0,0,0">
                        <Setter Property="CornerRadius"
                                TargetName="OutsideBorder"
                                Value="0,0,0,0"/>
                        <Setter Property="Padding"
                                TargetName="OutsideBorder"
                                Value="0,0,0,0"/>
                        <Setter Property="CornerRadius"
                                TargetName="InsideBorder"
                                Value="0,0,0,0"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Style.Resources>
    </Style>

    <DataTemplate x:Key="{dxdasht:PieItemThemeKey ResourceKey=ChartDiagramTemplate}">
        <dxc:SimpleDiagram2D SeriesItemsSource="{Binding Series}">
            <dxc:SimpleDiagram2D.SeriesItemTemplate>
                <DataTemplate>
                    <dxc:PieSeries2D ArgumentDataMember="{Binding ArgumentDataMember}"
                                     ColorDataMember="{Binding ColorDataMember}"
                                     DataSource="{Binding DataSource}"
                                     HoleRadiusPercent="{DXBinding 'IsDonut ? 50d : 0d'}"
                                     ValueDataMember="{Binding ValueDataMember}">
                        <dxc:PieSeries2D.Label>
                            <dxc:SeriesLabel dxc:PieSeries.LabelPosition="{Binding LabelPosition}"
                                             Indent="0"
                                             MaxHeight="60"
                                             MaxWidth="{Binding MaxLabelWidth}"
                                             RenderMode="RectangleConnectedToCenter"
                                             ResolveOverlappingMode="Default"
                                             Visible="True"/>
                        </dxc:PieSeries2D.Label>
                        <dxc:PieSeries2D.Model>
                            <dxc:CustomPie2DModel>
                                <dxc:CustomPie2DModel.PointTemplate>
                                    <ControlTemplate>
                                        <dxdashi:PiePointPresenter/>
                                    </ControlTemplate>
                                </dxc:CustomPie2DModel.PointTemplate>
                            </dxc:CustomPie2DModel>
                        </dxc:PieSeries2D.Model>
                    </dxc:PieSeries2D>
                </DataTemplate>
            </dxc:SimpleDiagram2D.SeriesItemTemplate>
        </dxc:SimpleDiagram2D>
    </DataTemplate>

    <Style x:Key="{dxdasht:PieItemThemeKey ResourceKey=ViewStyle}" TargetType="{x:Type ItemsControl}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="ItemsSource" Value="{Binding ItemsSource}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <dxdashi:PiesPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <dxc:ChartControl Style="{Binding Path=(dxdash:PieDashboardLayoutItem.ChartStyle), RelativeSource={RelativeSource Self}}">
                            <dxc:ChartControl.ToolTipController>
                                <dxc:ChartToolTipController>
                                    <dxmvvm:Interaction.Behaviors>
                                        <dxmvvm:EventToCommand Command="{Binding Path=DataContext.OnToolTipOpeningCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                               EventArgsConverter="{StaticResource EventToCommandConverter}"
                                                               EventName="ToolTipOpening"
                                                               PassEventArgsToCommand="True"/>
                                    </dxmvvm:Interaction.Behaviors>
                                </dxc:ChartToolTipController>
                            </dxc:ChartControl.ToolTipController>
                            <dxc:ChartControl.Titles>
                                <dxc:Title Content="{Binding Title}"
                                           Dock="Top"
                                           FontSize="16"
                                           HorizontalAlignment="Center"
                                           Visible="{Binding ShowTitle}"/>
                            </dxc:ChartControl.Titles>
                        </dxc:ChartControl>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <ScrollViewer CanContentScroll="True"
                                  HorizontalScrollBarVisibility="Auto"
                                  VerticalScrollBarVisibility="Auto">
                        <ItemsPresenter/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.DashboardWpf.Internal.PieItemContainer}" TargetType="{x:Type dxdashi:PieItemContainer}">
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="dxdashi:PieItemContainer">
                                <ContentPresenter/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="dxmvvm:Interaction.BehaviorsTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <ItemsControl>
                                    <dxmvvm:FocusBehavior EventName="MouseDown"/>
                                    <dxmvvm:EventToCommand Command="{Binding MouseDownCommand}"
                                                           EventArgsConverter="{StaticResource EventToCommandConverter}"
                                                           EventName="MouseDown"
                                                           MarkRoutedEventsAsHandled="True"
                                                           PassEventArgsToCommand="True"/>
                                    <dxmvvm:EventToCommand Command="{Binding MouseUpCommand}"
                                                           EventArgsConverter="{StaticResource EventToCommandConverter}"
                                                           EventName="MouseUp"
                                                           PassEventArgsToCommand="True"/>
                                    <dxmvvm:EventToCommand Command="{Binding MouseMoveCommand}"
                                                           EventArgsConverter="{StaticResource EventToCommandConverter}"
                                                           EventName="MouseMove"
                                                           PassEventArgsToCommand="True"/>
                                    <dxmvvm:EventToCommand Command="{Binding MouseDoubleClickCommand}"
                                                           EventArgsConverter="{StaticResource EventToCommandConverter}"
                                                           EventName="MouseDoubleClick"
                                                           PassEventArgsToCommand="True"/>
                                    <dxmvvm:EventToCommand Command="{Binding MouseLeaveCommand}"
                                                           EventArgsConverter="{StaticResource EventToCommandConverter}"
                                                           EventName="MouseLeave"
                                                           PassEventArgsToCommand="True"/>
                                </ItemsControl>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="{dxdasht:PieItemThemeKey ResourceKey=Template}">
        <dxdashi:PieItemsControl Style="{Binding Path=(dxdash:DashboardLayoutItem.ViewStyle), RelativeSource={RelativeSource TemplatedParent}}"/>
    </DataTemplate>

    <ControlTemplate x:Key="{dxdasht:PieItemThemeKey ResourceKey=PiePointPresenterTemplate}" TargetType="dxdashi:PiePointPresenter">
        <ControlTemplate.Resources>
            <LinearGradientBrush x:Key="selectedMask"
                                 EndPoint="8,8"
                                 MappingMode="Absolute"
                                 SpreadMethod="Repeat"
                                 cs:id="LinearGradientBrush_0000">
                <LinearGradientBrush.GradientStops>
                    <GradientStop Color="#B5000000"
                                  Offset="0.5"
                                  cs:id="GradientStop_0000"/>
                    <GradientStop Color="Black"
                                  Offset="0.5"
                                  cs:id="GradientStop_0001"/>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="highlightedMask"
                                 EndPoint="8,8"
                                 MappingMode="Absolute"
                                 SpreadMethod="Repeat"
                                 cs:id="LinearGradientBrush_0001">
                <LinearGradientBrush.GradientStops>
                    <GradientStop Color="#E5000000"
                                  Offset="0.5"
                                  cs:id="GradientStop_0002"/>
                    <GradientStop Color="Black"
                                  Offset="0.5"
                                  cs:id="GradientStop_0003"/>
                </LinearGradientBrush.GradientStops>
            </LinearGradientBrush>
        </ControlTemplate.Resources>
        <Grid x:Name="model"
              Background="Transparent"
              cs:id="Grid_0000">
            <Ellipse x:Name="fill" Fill="{Binding Path=PointColor, ConverterParameter=Gray, Converter={StaticResource brushOverlayConverter}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsHighlighted}" Value="True">
                <Setter Property="OpacityMask"
                        TargetName="fill"
                        Value="{StaticResource ResourceKey=highlightedMask}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter Property="OpacityMask"
                        TargetName="fill"
                        Value="{StaticResource ResourceKey=selectedMask}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.DashboardWpf.Internal.PiePointPresenter}" TargetType="dxdashi:PiePointPresenter">
        <Setter Property="Template" Value="{DynamicResource {dxdasht:PieItemThemeKey ResourceKey=PiePointPresenterTemplate}}"/>
        <Setter Property="Focusable" Value="False"/>
    </Style>

</ResourceDictionary>