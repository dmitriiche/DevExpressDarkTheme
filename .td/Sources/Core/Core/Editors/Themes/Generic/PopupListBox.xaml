<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:dxep="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <dxtEx:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2019Dark.v20.2;component/Core/Core/Editors/Themes/Generic/Common.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <dx:StringEmptyToSpaceConverter x:Key="stringToSpaceConverter"/>

    <dx:NegationConverter x:Key="negationConverter"/>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Editors.Internal.ImagePresenter}" TargetType="{x:Type dxei:ImagePresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxei:ImagePresenter}">
                    <dx:DXImage x:Name="PART_Image" Stretch="None"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=RadioEmptyItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <Border Background="Transparent"
                            SnapsToDevicePixels="True"
                            cs:id="Border_0000">
                        <dxep:ListBoxRadioButton x:Name="radioButton"
                                                 dx:FocusHelper2.Focusable="False"
                                                 dxei:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                                                 Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                                 HorizontalAlignment="Stretch"
                                                 HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                                 IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                 IsHitTestVisible="True"
                                                 Margin="3,0,3,0"
                                                 Padding="0,2,0,2"
                                                 VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxep:ListBoxRadioButton.Content>
                                <ContentPresenter/>
                            </dxep:ListBoxRadioButton.Content>
                        </dxep:ListBoxRadioButton>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin"
                                    TargetName="radioButton"
                                    Value="3,0,3,0"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).EditValue, RelativeSource={RelativeSource Self}}" Value="{x:Null}">
                            <Setter Property="IsSelected" Value="True"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=SelectAllItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="dx:FocusHelper2.Focusable" Value="True"/>
        <Setter Property="IsSelected" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.IsSelected, RelativeSource={RelativeSource Self}, Mode=TwoWay}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <Border Background="Transparent" cs:id="Border_0000">
                        <dxep:SelectAllItemCheckEdit x:Name="checkEdit"
                                                     dx:FocusHelper2.Focusable="false"
                                                     dxei:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                                                     EditValue="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).SelectionViewModel.SelectAll, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                                     HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                                     Padding="3,0,0,0"
                                                     ShowBorder="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource TemplatedParent}}"
                                                     VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxep:SelectAllItemCheckEdit.Content>
                                <Binding Converter="{StaticResource stringToSpaceConverter}" Path="DisplayText"/>
                            </dxep:SelectAllItemCheckEdit.Content>
                        </dxep:SelectAllItemCheckEdit>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin"
                                    TargetName="checkEdit"
                                    Value="0,0,0,0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=WaitIndicatorItemContainerStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="dx:FocusHelper2.Focusable" Value="True"/>
        <Setter Property="IsSelected" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <dx:ColumnWaitIndicator/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxet:CustomItemThemeKey ResourceKey=DefaultButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="Transparent"
                cs:id="Setter_0000"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=EmptyItemTemplate}">
        <Button Command="{Binding Path=Command}"
                CommandParameter="{Binding Path=Item}"
                Content="{Binding Path=DisplayText}"
                Style="{DynamicResource {dxet:CustomItemThemeKey ResourceKey=DefaultButtonStyle}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=SeparatorTemplate}">
        <Separator/>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:CustomItemThemeKey ResourceKey=DefaultTemplate}">
        <ContentPresenter Content="{Binding Path=DisplayText, Converter={StaticResource stringToSpaceConverter}}"/>
    </DataTemplate>

    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=DefaultItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Background"
                Value="Transparent"
                cs:id="Setter_0000"/>
        <Setter Property="BorderBrush"
                Value="Transparent"
                cs:id="Setter_0001"/>
        <Setter Property="BorderThickness" Value="{DynamicResource {dxet:EditorListBoxThemeKey ResourceKey=DefaultBorderThickness}}"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource Self}}"/>
        <!-- <Setter Property="Padding" Value="2,0,0,0" /> -->
        <Setter Property="Template" Value="{DynamicResource {dxet:EditorListBoxThemeKey ResourceKey=ItemTemplate}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=CheckBoxItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <Border Background="Transparent"
                            SnapsToDevicePixels="True"
                            cs:id="Border_0000">
                        <dxep:CheckEdit x:Name="checkEdit"
                                        dx:FocusHelper2.Focusable="False"
                                        dxei:ControlHelper.IsFocused="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                                        HorizontalAlignment="Stretch"
                                        HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                        IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                        IsHitTestVisible="True"
                                        Padding="3,0,0,0"
                                        ShowBorder="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource TemplatedParent}}"
                                        VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                            <ContentPresenter/>
                        </dxep:CheckEdit>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin"
                                    TargetName="checkEdit"
                                    Value="0,0,0,0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxet:EditorListBoxThemeKey ResourceKey=RadioButtonItemStyle}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type dxe:ListBoxEditItem}">
                    <Border Background="Transparent"
                            SnapsToDevicePixels="True"
                            cs:id="Border_0000">
                        <dxep:ListBoxRadioButton Name="radioButton"
                                                 dx:FocusHelper2.Focusable="False"
                                                 dxei:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource TemplatedParent}}"
                                                 Foreground="{Binding Path=(dxe:BaseEdit.OwnerEdit).Foreground, RelativeSource={RelativeSource TemplatedParent}}"
                                                 HorizontalAlignment="Stretch"
                                                 HorizontalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                                 IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                 IsHitTestVisible="True"
                                                 Margin="3,0,3,0"
                                                 Padding="0,2,0,2"
                                                 VerticalContentAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                            <dxep:ListBoxRadioButton.Content>
                                <ContentPresenter/>
                            </dxep:ListBoxRadioButton.Content>
                        </dxep:ListBoxRadioButton>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).ShowBorder, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="Margin"
                                    TargetName="radioButton"
                                    Value="3,0,3,0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).IncrementalSearch, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).HasItemTemplate, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="dxeh:TextBlockService.EnableTextHighlighting" Value="True"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=ScrollViewerTemplate}" TargetType="{x:Type ScrollViewer}">
        <Grid x:Name="Grid"
              Background="{TemplateBinding Background}"
              SnapsToDevicePixels="True">
            <Grid.Resources>
                <dxei:ScrollContentPresenterMarginCorrector x:Key="ScrollContentPresenterMarginCorrector"/>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                    CanContentScroll="{TemplateBinding CanContentScroll}"
                                    CanHorizontallyScroll="False"
                                    CanVerticallyScroll="False"
                                    Content="{TemplateBinding Content}"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    Grid.Column="0"
                                    Grid.Row="0"
                                    Margin="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ScrollContentPresenterMarginCorrector}}"/>
            <ScrollBar x:Name="PART_VerticalScrollBar"
                       AutomationProperties.AutomationId="VerticalScrollBar"
                       Cursor="Arrow"
                       Grid.Column="1"
                       Grid.Row="0"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       Minimum="0"
                       Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportHeight}"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
            <ScrollBar x:Name="PART_HorizontalScrollBar"
                       AutomationProperties.AutomationId="HorizontalScrollBar"
                       Cursor="Arrow"
                       Grid.Column="0"
                       Grid.Row="1"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       Minimum="0"
                       Orientation="Horizontal"
                       Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                       ViewportSize="{TemplateBinding ViewportWidth}"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
            <Border x:Name="Corner"
                    Grid.Column="1"
                    Grid.Row="1"
                    Style="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollingCornerStyle}}"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=Template}" TargetType="{x:Type dxep:EditorListBox}">
        <Border x:Name="Bd" Background="{TemplateBinding Background}">
            <Grid>
                <ScrollViewer x:Name="ScrollViewer"
                              BorderThickness="0"
                              dx:FocusHelper2.Focusable="False"
                              Padding="{TemplateBinding Padding}">
                    <ItemsPresenter/>
                    <dx:ScrollBarExtensions.AllowMouseScrolling>
                        <system:Boolean>true</system:Boolean>
                    </dx:ScrollBarExtensions.AllowMouseScrolling>
                </ScrollViewer>
                <dx:WaitIndicator DeferedVisibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ShowWaitIndicator, RelativeSource={RelativeSource Self}}"/>
            </Grid>
        </Border>
    </ControlTemplate>

</ResourceDictionary>