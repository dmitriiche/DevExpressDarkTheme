<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:dxep="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:help="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:interop="clr-namespace:System.Windows.Interop;assembly=PresentationFramework"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <dx:EditorStringIdConverter x:Key="EditorStringIdConverter"/>

    <Style x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=ResizeGripStyle}" TargetType="{x:Type dxe:PopupSizeGrip}">
        <Setter Property="Template" Value="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=ResizeGripTemplate}}"/>
    </Style>

    <Style x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=NullValueButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False"/>
        <Setter Property="Content" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=SetNullValue, Converter={StaticResource EditorStringIdConverter}}"/>
    </Style>

    <Style x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=AddNewButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False"/>
        <Setter Property="Content" Value="{Binding Path=IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=LookUpAddNew, Converter={StaticResource EditorStringIdConverter}}"/>
    </Style>

    <ControlTemplate x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=PopupBottomAreaTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="PART_Root" Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.FooterVisibility, RelativeSource={RelativeSource TemplatedParent}}">
            <ContentPresenter/>
            <ContentControl dx:FocusHelper2.Focusable="False" Template="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=FooterTemplate}}"/>
            <Button x:Name="PART_CloseButton"
                    Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                    Content="Button"
                    Height="13"
                    HorizontalAlignment="Left"
                    Margin="3,3,0,3"
                    Template="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=CloseButtonTemplate}}"
                    VerticalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.VerticalAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                    Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.CloseButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}"
                    Width="13">
                <Button.CommandParameter>
                    <dxep:PopupCloseMode>Cancel</dxep:PopupCloseMode>
                </Button.CommandParameter>
            </Button>
            <dx:UniformStackPanel ChildSpacing="0"
                                  HorizontalAlignment="Center"
                                  Margin="15,0,15,0"
                                  Orientation="Horizontal"
                                  Width="Auto">
                <Button x:Name="PART_OkButton"
                        Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Content="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=OK, Converter={StaticResource EditorStringIdConverter}}"
                        dx:FocusHelper2.Focusable="False"
                        HorizontalAlignment="Stretch"
                        IsEnabled="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.OkButtonIsEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                        Margin="3,6,3,6"
                        VerticalAlignment="Center"
                        Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.OkButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                    <Button.CommandParameter>
                        <dxep:PopupCloseMode>Normal</dxep:PopupCloseMode>
                    </Button.CommandParameter>
                </Button>
                <Button x:Name="PART_CancelButton"
                        Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).ClosePopupCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        Content="{Binding IsTabStop, RelativeSource={RelativeSource Self}, ConverterParameter=Cancel, Converter={StaticResource EditorStringIdConverter}}"
                        dx:FocusHelper2.Focusable="False"
                        HorizontalAlignment="Stretch"
                        Margin="3,6,3,6"
                        VerticalAlignment="Center"
                        Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.CancelButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}">
                    <Button.CommandParameter>
                        <dxep:PopupCloseMode>Cancel</dxep:PopupCloseMode>
                    </Button.CommandParameter>
                </Button>
                <Button x:Name="PART_AddNewButton"
                        Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).AddNewCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        HorizontalAlignment="Left"
                        Margin="3,6,3,6"
                        MinWidth="80"
                        Style="{DynamicResource ResourceKey={dxet:PopupBaseEditThemeKey ResourceKey=AddNewButtonStyle}}"
                        Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.AddNewButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Button x:Name="PART_NullValueButton"
                        Command="{Binding Path=(dxe:BaseEdit.OwnerEdit).SetNullValueCommand, RelativeSource={RelativeSource TemplatedParent}}"
                        HorizontalAlignment="Left"
                        Margin="3,6,3,6"
                        MinWidth="80"
                        Style="{DynamicResource ResourceKey={dxet:PopupBaseEditThemeKey ResourceKey=NullValueButtonStyle}}"
                        Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.NullValueButtonVisibility, RelativeSource={RelativeSource TemplatedParent}}"/>
            </dx:UniformStackPanel>
            <dxep:PopupSizeGrip x:Name="PART_SizeGrip"
                                dx:FocusHelper2.Focusable="False"
                                HorizontalAlignment="Right"
                                Margin="2,3,2,2"
                                Style="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=ResizeGripStyle}}"
                                VerticalAlignment="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.VerticalAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.Visibility, RelativeSource={RelativeSource TemplatedParent}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="HorizontalAlignment"
                        TargetName="PART_SizeGrip"
                        Value="Left"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=PopupTopAreaStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="dx:FocusHelper2.Focusable" Value="False"/>
        <Setter Property="help:TextBlockService.EnableTextHighlighting" Value="False"/>
        <Setter Property="Template" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupTopAreaTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
    </Style>

    <Style x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=PopupBottomAreaStyle}" TargetType="{x:Type ContentControl}">
        <Setter Property="help:TextBlockService.EnableTextHighlighting" Value="False"/>
        <Setter Property="dx:FocusHelper2.Focusable" Value="False"/>
        <Setter Property="Template" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupBottomAreaTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
    </Style>

    <ControlTemplate x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=PopupContentContainerTemplate}" TargetType="{x:Type dxep:PopupContentContainer}">
        <Grid>
            <Grid.Resources>
                <sys:Int32 x:Key="Top">0</sys:Int32>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="DropDownDirectionStates">
                    <VisualState x:Name="TopToBottomDirection"/>
                    <VisualState x:Name="BottomToTopDirection">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Duration="0"
                                                           Storyboard.TargetName="PART_Footer"
                                                           Storyboard.TargetProperty="(Grid.Row)">
                                <ObjectAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource Top}"/>
                                </ObjectAnimationUsingKeyFrames.KeyFrames>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
                <RowDefinition x:Name="RowTopFooter" Height="Auto"/>
                <RowDefinition x:Name="RowTopContent" Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition x:Name="RowBottomFooter" Height="Auto"/>
            </Grid.RowDefinitions>
            <ContentControl x:Name="PART_Top"
                            Grid.Row="1"
                            Style="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=PopupTopAreaStyle}}">
                <!--ONLY SL
                <dxe:BaseEdit.OwnerEdit>
                    <Binding Path="(dxe:BaseEdit.OwnerEdit)" RelativeSource="{RelativeSource TemplatedParent}" />
                </dxe:BaseEdit.OwnerEdit>
                ONLY SL-->
            </ContentControl>
            <ContentPresenter x:Name="Content" Grid.Row="2"/>
            <ContentControl x:Name="PART_Footer"
                            Grid.Row="3"
                            Style="{DynamicResource {dxet:PopupBaseEditThemeKey ResourceKey=PopupBottomAreaStyle}}">
                <!--ONLY SL
                <dxe:BaseEdit.OwnerEdit>
                    <Binding Path="(dxe:BaseEdit.OwnerEdit)" RelativeSource="{RelativeSource TemplatedParent}" />
                </dxe:BaseEdit.OwnerEdit>
                ONLY SL-->
            </ContentControl>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=PopupContentTemplate}" TargetType="{x:Type dxep:PopupContentControl}">
        <ContentPresenter/>
    </ControlTemplate>

    <DataTemplate x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=DialogServiceContentTemplate}">
        <ContentControl Content="{Binding Path=Content}" Focusable="False"/>
    </DataTemplate>

    <ControlTemplate x:Key="{dxet:PopupBaseEditThemeKey ResourceKey=ResizeGripTemplate}" TargetType="{x:Type dxe:PopupSizeGrip}">
        <Thumb x:Name="PART_Thumb"
               Cursor="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.Cursor, RelativeSource={RelativeSource TemplatedParent}}"
               RenderTransformOrigin="0.5,0.5"
               Template="{DynamicResource ResourceKey={dxet:PopupBaseEditThemeKey ResourceKey=ThumbTemplate}}"/>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.IsDown, RelativeSource={RelativeSource Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="RenderTransform" TargetName="PART_Thumb">
                    <Setter.Value>
                        <RotateTransform Angle="90"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.IsDown, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="RenderTransform" TargetName="PART_Thumb">
                    <Setter.Value>
                        <RotateTransform Angle="180"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).PopupViewModel.IsLeft, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).ResizeGripViewModel.IsDown, RelativeSource={RelativeSource Self}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="RenderTransform" TargetName="PART_Thumb">
                    <Setter.Value>
                        <RotateTransform Angle="270"/>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>