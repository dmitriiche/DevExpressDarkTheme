<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dxn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:internal="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <dxtEx:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2019Dark.v20.2;component/Core/Core/Editors/Themes/Generic/Common.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=DefaultBorderThickness}">1,1,1,1</Thickness>

    <sys:Boolean x:Key="{dxet:ButtonsThemeKey ResourceKey=DateEditUseArrowGlyph}">True</sys:Boolean>

    <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <Thickness x:Key="{dxet:ButtonEditThemeKey ResourceKey=ButtonEditPaddingCorrection}">0,0,0,0</Thickness>

    <Thickness x:Key="{dxet:ButtonEditThemeKey ResourceKey=ButtonEditPadding}">0</Thickness>

    <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=LeftButtonMargin}">0,0,1,0</Thickness>

    <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=RightButtonMargin}">1,0,0,0</Thickness>

    <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=LeftButtonMarginCorrection}">0</Thickness>

    <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=RightButtonMarginCorrection}">0</Thickness>

    <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonMargin}">-1</Thickness>

    <Thickness x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonMarginCorrection}">0</Thickness>

    <Style x:Key="{dxet:ButtonsThemeKey ResourceKey=ImageButtonGlyphStyle}" TargetType="{x:Type Image}">
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
    </Style>

    <internal:BrushToSvgPaletteConverter x:Key="BrushToSvgPaletteConverter"/>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=ImageButtonContentTemplate}">
        <Grid Name="root">
            <dx:DXImage x:Name="image"
                        Source="{Binding Path=Glyph}"
                        Style="{Binding Path=GlyphStyle}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}}" Value="True">
                <Setter Property="dx:WpfSvgPalette.Palette"
                        TargetName="image"
                        Value="{Binding Path=(TextElement.Foreground), Converter={StaticResource BrushToSvgPaletteConverter}, ConverterParameter=BlackColor, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Tag"
                        TargetName="image"
                        Value="1"/>
            </DataTrigger>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="MinWidth"
                        TargetName="root"
                        Value="42"/>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=ButtonInfoTemplate}">
        <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <Button x:Name="PART_Item" Style="{Binding Path=ButtonStyle}"/>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=RepeatButtonInfoTemplate}">
        <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <RepeatButton x:Name="PART_Item" Style="{Binding Path=ButtonStyle}"/>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=ToggleButtonInfoTemplate}">
        <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <dx:ToggleStateButton x:Name="PART_Item"
                                  internal:SetIsCheckedToButtonInfoBehavior.IsEnabled="True"
                                  IsChecked="{Binding Path=IsChecked, Mode=TwoWay}"
                                  Style="{Binding Path=ButtonStyle}"/>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsDefaultButton}" Value="True">
                <Setter Property="IsChecked"
                        TargetName="PART_Item"
                        Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).IsPopupOpen, RelativeSource={RelativeSource Self}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsDefaultButton}" Value="False">
                <Setter Property="HandleToggle"
                        TargetName="PART_Item"
                        Value="False"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <ControlTemplate x:Key="{dxet:ButtonEditThemeKey ResourceKey=TemplateWithoutEditBox}" TargetType="{x:Type dxe:ButtonEdit}">
        <ContentControl HorizontalContentAlignment="Stretch"
                        internal:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
                        internal:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
                        IsTabStop="False"
                        Template="{TemplateBinding ActualBorderTemplate}"
                        VerticalContentAlignment="Stretch">
            <Grid>
                <dxe:EditorControl x:Name="PART_Content"
                                   IsEnabled="False"
                                   Opacity="0"
                                   Template="{TemplateBinding ActualEditorControlTemplate}"
                                   VerticalAlignment="Stretch"/>
                <dxe:ButtonsControl x:Name="PART_Buttons"
                                    ItemsSource="{TemplateBinding SortedButtons}"
                                    Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                    <dxe:ButtonsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <dxe:ButtonsPanel/>
                        </ItemsPanelTemplate>
                    </dxe:ButtonsControl.ItemsPanel>
                </dxe:ButtonsControl>
            </Grid>
        </ContentControl>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:ButtonEditThemeKey ResourceKey=InplaceTemplateWithoutEditBox}" TargetType="{x:Type dxe:ButtonEdit}">
        <Grid>
            <dxe:EditorControl x:Name="PART_Content"
                               IsEnabled="False"
                               Opacity="0"
                               Template="{TemplateBinding ActualEditorControlTemplate}"
                               VerticalAlignment="Stretch"/>
            <dxe:ButtonsControl x:Name="PART_Buttons"
                                ItemsSource="{TemplateBinding SortedButtons}"
                                Visibility="{Binding ShowEditorButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                <dxe:ButtonsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <dxe:ButtonsPanel/>
                    </ItemsPanelTemplate>
                </dxe:ButtonsControl.ItemsPanel>
            </dxe:ButtonsControl>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:ButtonEditThemeKey ResourceKey=Template}" TargetType="{x:Type dxe:ButtonEdit}">
        <ContentControl x:Name="PART_Root"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        dx:FocusHelper2.Focusable="False"
                        dxe:EditorAppearanceProperties.FocusedBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.FocusedBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                        dxe:EditorAppearanceProperties.ReadOnlyBackground="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBackground), RelativeSource={RelativeSource TemplatedParent}}"
                        dxe:EditorAppearanceProperties.ReadOnlyBorderBrush="{Binding Path=(dxe:EditorAppearanceProperties.ReadOnlyBorderBrush), RelativeSource={RelativeSource TemplatedParent}}"
                        dxn:AppearanceOptions.BorderThickness="{Binding Path=(dxn:AppearanceOptions.BorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                        dxn:AppearanceOptions.CornerRadius="{Binding Path=(dxn:AppearanceOptions.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        dxn:AppearanceOptions.HasBorderThickness="{Binding Path=(dxn:AppearanceOptions.HasBorderThickness), RelativeSource={RelativeSource TemplatedParent}}"
                        dxn:AppearanceOptions.HasCornerRadius="{Binding Path=(dxn:AppearanceOptions.HasCornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                        HorizontalContentAlignment="Stretch"
                        internal:ControlHelper.IsReadOnly="{TemplateBinding IsReadOnly}"
                        internal:ControlHelper.ShowFocusedState="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource TemplatedParent}}"
                        Template="{TemplateBinding ActualBorderTemplate}"
                        VerticalContentAlignment="Stretch">
            <Grid x:Name="ButtonEditGrid" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <dxe:ErrorControl x:Name="PART_ErrorPresenter"/>
                <dxe:ButtonsControl x:Name="PART_LeftButtons"
                                    Grid.Column="1"
                                    ItemsSource="{TemplateBinding LeftButtons}"
                                    Visibility="{Binding Path=ActualShowLeftButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                <dxe:EditorControl x:Name="PART_Content"
                                   dx:FocusHelper2.Focusable="False"
                                   Grid.Column="2"
                                   Template="{TemplateBinding ActualEditorControlTemplate}"
                                   VerticalAlignment="Stretch"/>
                <dxe:ButtonsControl x:Name="PART_RightButtons"
                                    Grid.Column="3"
                                    ItemsSource="{TemplateBinding RightButtons}"
                                    Visibility="{Binding Path=ActualShowRightButtons, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Grid>
        </ContentControl>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="true"/>
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template"
                            TargetName="PART_Content"
                            Value="{Binding Path=EditTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).(dxe:ActualPropertyProvider.Properties).IsTextEditable, RelativeSource={RelativeSource Self}}" Value="false"/>
                    <Condition Binding="{Binding Path=EditMode, RelativeSource={RelativeSource Self}}" Value="Standalone"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template"
                            TargetName="PART_Content"
                            Value="{Binding Path=EditNonEditableTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=ShowBorder, RelativeSource={RelativeSource Self}}" Value="true">
                <Setter Property="dx:WpfSvgPalette.Palette"
                        TargetName="PART_ErrorPresenter"
                        Value="{DynamicResource {dxet:InplaceBaseEditThemeKey ResourceKey=ValidationErrorSvgPalette}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoVerticalTemplate}">
        <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <Grid x:Name="MainGrid"
                  Height="Auto"
                  SnapsToDevicePixels="True"
                  Style="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoVerticalStyle}}"
                  Visibility="{Binding Path=Visibility}">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <dxe:SpinButton x:Name="PART_SpinUpButton"
                                ClickMode="{Binding Path=ClickMode}"
                                Command="{Binding ActualSpinUpCommand}"
                                CommandParameter="{Binding SpinUpCommandParameter}"
                                ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinUpGlyph}}"
                                dx:FocusHelper2.Focusable="False"
                                Foreground="{Binding Path=Foreground}"
                                Grid.Row="0"
                                Interval="500"
                                IsEnabled="{Binding IsEnabled}"
                                Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinUpButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinUpCommandTarget"/>
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
                <dxe:SpinButton x:Name="PART_SpinDownButton"
                                ClickMode="{Binding Path=ClickMode}"
                                Command="{Binding ActualSpinDownCommand}"
                                CommandParameter="{Binding SpinDownCommandParameter}"
                                ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinDownGlyph}}"
                                dx:FocusHelper2.Focusable="False"
                                Foreground="{Binding Path=Foreground}"
                                Grid.Row="1"
                                Interval="500"
                                IsEnabled="{Binding IsEnabled}"
                                Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinDownButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinDownCommandTarget"/>
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoHorizontalTemplate}">
        <Border Margin="{Binding Path=ActualMargin}" UseLayoutRounding="True">
            <Grid x:Name="MainGrid"
                  Height="Auto"
                  Style="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinButtonInfoHorizontalStyle}}"
                  Visibility="{Binding Path=Visibility}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <dxe:SpinButton x:Name="PART_SpinDownButton"
                                ClickMode="{Binding Path=ClickMode}"
                                Command="{Binding ActualSpinDownCommand}"
                                CommandParameter="{Binding SpinDownCommandParameter}"
                                ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinLeftGlyph}}"
                                dx:FocusHelper2.Focusable="False"
                                Foreground="{Binding Path=Foreground}"
                                Grid.Column="0"
                                Interval="500"
                                IsEnabled="{Binding IsEnabled}"
                                Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinLeftButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinDownCommandTarget"/>
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
                <dxe:SpinButton x:Name="PART_SpinUpButton"
                                ClickMode="{Binding Path=ClickMode}"
                                Command="{Binding ActualSpinUpCommand}"
                                CommandParameter="{Binding SpinUpCommandParameter}"
                                ContentTemplate="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinRightGlyph}}"
                                dx:FocusHelper2.Focusable="False"
                                Foreground="{Binding Path=Foreground}"
                                Grid.Column="1"
                                Interval="500"
                                IsEnabled="{Binding IsEnabled}"
                                Template="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=SpinRightButtonTemplate}}">
                    <dxe:SpinButton.CommandTarget>
                        <Binding Path="SpinUpCommandTarget"/>
                    </dxe:SpinButton.CommandTarget>
                </dxe:SpinButton>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=DeleteButtonInfoTemplate}">
        <Border Margin="{Binding Path=ActualMargin}">
            <dxe:ButtonClose x:Name="PART_Item" Style="{DynamicResource {dxet:ButtonsThemeKey ResourceKey=DeleteButtonStyle}}"/>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="{dxet:ButtonsThemeKey ResourceKey=LoadingButtonInfoTemplate}">
        <Button Style="{DynamicResource {dxet:ComboBoxEditThemeKey ResourceKey=LoadingButtonStyle}}" Visibility="{Binding Path=Visibility}"/>
    </DataTemplate>

</ResourceDictionary>