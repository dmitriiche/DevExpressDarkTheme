<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
                    xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Storyboard x:Key="PressStoryboard">
        <DoubleAnimation Duration="0:0:0.21"
                         Storyboard.TargetName="BorderLine"
                         Storyboard.TargetProperty="Opacity"
                         To="0.25"/>
    </Storyboard>

    <Storyboard x:Key="HighlightStoryboard">
        <DoubleAnimation Duration="0:0:0.21"
                         Storyboard.TargetName="BorderLine"
                         Storyboard.TargetProperty="Opacity"
                         To="1"/>
    </Storyboard>

    <Storyboard x:Key="ReleaseStoryboard">
        <DoubleAnimation Duration="0:0:0.34"
                         Storyboard.TargetName="BorderLine"
                         Storyboard.TargetProperty="Opacity"
                         To="0"/>
    </Storyboard>

    <Storyboard x:Key="CheckStoryboard">
        <DoubleAnimation Duration="0:0:0.21"
                         Storyboard.TargetName="CheckedBorderLine"
                         Storyboard.TargetProperty="Opacity"
                         To="0.5"/>
    </Storyboard>

    <Storyboard x:Key="UncheckStoryboard">
        <DoubleAnimation Duration="0:0:0.34"
                         Storyboard.TargetName="CheckedBorderLine"
                         Storyboard.TargetProperty="Opacity"
                         To="0"/>
    </Storyboard>

    <ControlTemplate x:Key="{dxbt:BarItemThemeKey ResourceKey=ControlTemplateInRadialMenu}" TargetType="{x:Type dxb:BarItemLinkControl}">
        <dxb:RadialMenuItem x:Name="item"
                            Angle="{Binding Path=(dxb:RadialMenuItemsPanel.Angle), RelativeSource={RelativeSource TemplatedParent}}"
                            ContentTopPadding="32"
                            Focusable="False">
            <dxb:RadialMenuItem.Arrow>
                <Button x:Name="PART_ArrowButton"
                        Focusable="False"
                        IsEnabled="{TemplateBinding ActualIsArrowEnabled}"
                        Visibility="{Binding ActualShowArrow, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BooleanToVisibilityConverter Invert=False}}">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Grid x:Name="rootGrid" Background="{x:Null}">
                                <dxb:ArcBorder x:Name="PART_ArrowBorder"
                                               Fill="{DynamicResource {dxbt:RadialMenuItemThemeKey ResourceKey=BackgroundBrush}}"
                                               Thickness="26"/>
                                <Path Data="F1 M 6,0L 1.18424e-015,6L 12,6L 6,0 Z "
                                      Fill="{DynamicResource {dxbt:RadialMenuItemThemeKey ResourceKey=PathBrush}}"
                                      HorizontalAlignment="Center"
                                      IsHitTestVisible="False"
                                      Margin="0,10,0,0"
                                      Stretch="None"
                                      VerticalAlignment="Top"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding ElementName=PART_ArrowBorder, Path=IsMouseOver}" Value="true">
                                    <Setter Property="Fill"
                                            TargetName="PART_ArrowBorder"
                                            Value="{DynamicResource {dxbt:RadialMenuItemThemeKey ResourceKey=HoverPathBrush}}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </dxb:RadialMenuItem.Arrow>
            <dxb:RadialMenuItem.Border>
                <Grid x:Name="borderRootGrid"
                      Background="{x:Null}"
                      Focusable="False"
                      IsEnabled="{TemplateBinding ActualIsContentEnabled}">
                    <Border x:Name="Border"
                            Background="Transparent"
                            dxb:ArcBorder.ClipToSectorBounds="true"
                            Focusable="False"
                            cs:id="Border_0000"/>
                    <dxb:ArcBorder x:Name="CheckedBorderLine"
                                   Fill="{DynamicResource {dxbt:RadialMenuItemThemeKey ResourceKey=BackgroundBrush}}"
                                   Focusable="False"
                                   IsHitTestVisible="False"
                                   Opacity="0"
                                   Thickness="2"
                                   TopPadding="29"/>
                    <dxb:ArcBorder x:Name="BorderLine"
                                   Fill="{DynamicResource {dxbt:RadialMenuItemThemeKey ResourceKey=BackgroundBrush}}"
                                   Focusable="False"
                                   IsHitTestVisible="False"
                                   Opacity="0"
                                   Thickness="3"
                                   TopPadding="29"/>
                </Grid>
            </dxb:RadialMenuItem.Border>
            <dxb:RadialMenuItem.Content>
                <StackPanel x:Name="Content"
                            Focusable="False"
                            HorizontalAlignment="Center"
                            IsEnabled="{TemplateBinding ActualIsContentEnabled}"
                            RenderTransformOrigin="0.5,0.5"
                            VerticalAlignment="Center">
                    <dx:MeasurePixelSnapperContentControl ContentTemplate="{TemplateBinding ActualGlyphTemplate}"
                                                          Focusable="False"
                                                          HorizontalAlignment="Center"
                                                          Visibility="{Binding ActualShowGlyph, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BooleanToVisibilityConverter Invert=False}}">
                        <dx:DXImage x:Name="Image"
                                    dxb:ImageColorizer.Color="{DynamicResource {dxbt:RadialMenuItemThemeKey ResourceKey=NormalImageColorizeColor}}"
                                    dxb:ImageColorizer.IsEnabled="{TemplateBinding ActualAllowGlyphTheming}"
                                    Focusable="False"
                                    Source="{TemplateBinding ActualGlyph}"
                                    Stretch="None"/>
                    </dx:MeasurePixelSnapperContentControl>
                    <ContentControl Content="{TemplateBinding ActualContent}"
                                    ContentTemplate="{TemplateBinding ActualContentTemplate}"
                                    Focusable="False"
                                    HorizontalAlignment="Center"
                                    Visibility="{Binding ActualShowContent, RelativeSource={RelativeSource TemplatedParent}, Converter={dx:BooleanToVisibilityConverter Invert=False}}"/>
                </StackPanel>
            </dxb:RadialMenuItem.Content>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="CommonStates_Normal" Storyboard="{StaticResource ReleaseStoryboard}"/>
                    <VisualState x:Name="CommonStates_Highlighted" Storyboard="{StaticResource HighlightStoryboard}"/>
                    <VisualState x:Name="CommonStates_Pressed" Storyboard="{StaticResource PressStoryboard}"/>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckedStates">
                    <VisualState x:Name="CheckedStates_Checked" Storyboard="{StaticResource CheckStoryboard}"/>
                    <VisualState x:Name="CheckedStates_Unchecked" Storyboard="{StaticResource UncheckStoryboard}"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </dxb:RadialMenuItem>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="true"/>
                    <Condition Property="IsMouseOver" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Highlighted"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"/>
                    <Condition Property="IsMouseOver"
                               SourceName="PART_ArrowButton"
                               Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Normal"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ActualIsHoverEnabled" Value="true"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                    <Condition Property="IsMouseOver"
                               SourceName="PART_ArrowButton"
                               Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Highlighted"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ActualIsHoverEnabled" Value="true"/>
                    <Condition Property="IsPressed" Value="true"/>
                    <Condition Property="IsMouseOver"
                               SourceName="PART_ArrowButton"
                               Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Pressed"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="false"/>
                    <Condition Property="IsKeyboardFocused" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Normal"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ActualIsHoverEnabled" Value="false"/>
                    <Condition Property="IsKeyboardFocused" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="dxb:VisualStateSetter.CommonGroupVisualState" Value="CommonStates_Normal"/>
            </MultiTrigger>
            <Trigger Property="ActualIsChecked" Value="True">
                <Setter Property="dxb:VisualStateSetter.CheckedGroupVisualState" Value="CheckedStates_Checked"/>
            </Trigger>
            <Trigger Property="ActualIsChecked" Value="False">
                <Setter Property="dxb:VisualStateSetter.CheckedGroupVisualState" Value="CheckedStates_Unchecked"/>
            </Trigger>
            <Trigger Property="ActualIsArrowEnabled" Value="false">
                <Setter Property="Opacity"
                        TargetName="PART_ArrowButton"
                        Value="0.5"/>
            </Trigger>
            <Trigger Property="ActualIsContentEnabled" Value="false">
                <Setter Property="Opacity"
                        TargetName="borderRootGrid"
                        Value="0.5"/>
                <Setter Property="Opacity"
                        TargetName="Content"
                        Value="0.5"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>