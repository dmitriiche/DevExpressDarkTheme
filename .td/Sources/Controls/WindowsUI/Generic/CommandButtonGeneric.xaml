<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxi="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:dxwui="http://schemas.devexpress.com/winfx/2008/xaml/windowsui"
                    xmlns:dxwuii="http://schemas.devexpress.com/winfx/2008/xaml/windowsui/internal"
                    xmlns:dxwuit="http://schemas.devexpress.com/winfx/2008/xaml/windowsui/themekeys"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <dx:BoolToVisibilityConverter x:Key="boolToVisibilityConverter"/>

    <dx:BoolToVisibilityInverseConverter x:Key="boolToVisibilityInverseConverter"/>

    <SolidColorBrush x:Key="HoverForeBrush" Color="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=HoverForeColor}}"/>

    <SolidColorBrush x:Key="PressedForeBrush" Color="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=PressedForeColor}}"/>

    <SolidColorBrush x:Key="NormalForeBrush" Color="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=NormalForeColor}}"/>

    <ControlTemplate x:Key="CommandButtonTemplate" TargetType="dxwui:CommandButton">
        <Grid x:Name="RootGrid"
              Background="Transparent"
              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
              cs:id="Grid_0000">
            <Border x:Name="panel" Margin="{TemplateBinding Padding}">
                <Border Height="{TemplateBinding EllipseDiameter}"
                        Padding="1"
                        Width="{TemplateBinding EllipseDiameter}">
                    <Grid x:Name="PART_ContentGrid">
                        <Ellipse x:Name="back"
                                 Fill="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=NormalBackBrush}}"
                                 UseLayoutRounding="False"/>
                        <Ellipse x:Name="border"
                                 Stroke="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=NormalBorderBrush}}"
                                 StrokeThickness="{TemplateBinding StrokeThickness}"
                                 Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsEllipseEnabled, Converter={StaticResource boolToVisibilityConverter}}"/>
                        <Grid Height="{TemplateBinding GlyphHeight}" Width="{TemplateBinding GlyphWidth}">
                            <dxwuii:ShapeContentPresenter x:Name="content"
                                                          AccentColor="{Binding Path=(dxb:ImageColorizer.Color), RelativeSource={RelativeSource TemplatedParent}}"
                                                          Foreground="{StaticResource NormalForeBrush}"
                                                          HorizontalAlignment="Center"
                                                          VerticalAlignment="Center"
                                                          Visibility="{Binding IsGlyphVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ResourceKey=boolToVisibilityInverseConverter}}"/>
                            <dxwuii:ImagePresenter x:Name="glyph"
                                                   AccentColor="{Binding Path=(dxb:ImageColorizer.Color), RelativeSource={RelativeSource TemplatedParent}}"
                                                   AllowAccent="{TemplateBinding AllowGlyphTheming}"
                                                   Source="{TemplateBinding Glyph}"
                                                   Stretch="{TemplateBinding GlyphStretch}"
                                                   Visibility="{Binding IsGlyphVisible, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ResourceKey=boolToVisibilityConverter}}"/>
                        </Grid>
                    </Grid>
                </Border>
            </Border>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal"/>
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=HoverBorderBrush}}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=HoverBackBrush}}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource HoverForeBrush}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=HoverForeColor}}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=HoverForeColor}}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="Stroke">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=PressedBorderBrush}}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="back" Storyboard.TargetProperty="Fill">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=PressedBackBrush}}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Foreground">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PressedForeBrush}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=PressedForeColor}}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="glyph" Storyboard.TargetProperty="AccentColor">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=PressedForeColor}}"/>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimation Duration="0"
                                             Storyboard.TargetName="panel"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.6"/>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <Style x:Key="commandButtonStyle" TargetType="dxwui:CommandButton">
        <Setter Property="Template" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=Template}}"/>
        <Setter Property="Background"
                Value="Transparent"
                cs:id="Setter_0000"/>
        <Setter Property="Foreground"
                Value="Black"
                cs:id="Setter_0001"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.WindowsUI.CommandButton}"
           BasedOn="{StaticResource commandButtonStyle}"
           TargetType="dxwui:CommandButton">
        <Setter Property="Template" Value="{StaticResource CommandButtonTemplate}"/>
        <Setter Property="dxb:ImageColorizer.Color" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=NormalForeColor}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.WindowsUI.Internal.BackButton}"
           BasedOn="{StaticResource commandButtonStyle}"
           TargetType="dxwuii:BackButton">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=BackGlyph}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.WindowsUI.Internal.ForwardButton}"
           BasedOn="{StaticResource commandButtonStyle}"
           TargetType="dxwuii:ForwardButton">
        <Setter Property="ContentTemplate" Value="{DynamicResource {dxwuit:CommandButtonElementsThemeKey ResourceKey=ForwardGlyph}}"/>
    </Style>

    <!--ONLY SL
    <Style TargetType="{x:Type dxwui:NavigationButton}" dx:ThemeManager.SameBasedOnType="True" dx:ThemeManager.InheritedStyleSource="{StaticResource CoreDictionary}">
    </Style>
    ONLY SL-->

</ResourceDictionary>