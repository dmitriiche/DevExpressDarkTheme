<ResourceDictionary mc:Ignorable="cs"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:cs="colorscheme_ignorable_uri"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
                    xmlns:dxei="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal"
                    xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys"
                    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                    xmlns:dxght="http://schemas.devexpress.com/winfx/2008/xaml/grid/internal"
                    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
                    xmlns:dxtEx="clr-namespace:DevExpress.Xpf.Utils.Themes;assembly=DevExpress.Xpf.Core.v20.2"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:mvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <dx:BooleanToVisibilityConverter x:Key="BooleanToVisibilityInvertConverter" Invert="True"/>

    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=LightweightCellStyle}" TargetType="dxg:LightweightCellEditor">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
        <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxet:InplaceBaseEditThemeKey ResourceKey=ValidationErrorSvgPalette}}"/>
        <Setter Property="ConditionalFormattingSvgPalette" Value="{DynamicResource {dxet:InplaceBaseEditThemeKey ResourceKey=ConditionalFormattingSvgPalette}}"/>
        <Style.Triggers>
            <Trigger Property="SelectionState" Value="CellMerge">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellMergeNoneBrush}}"/>
            </Trigger>
            <!-- <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True"> -->
            <!--     <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"/> -->
            <!-- </DataTrigger> -->
            <!-- <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True"> -->
            <!--     <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource Self}}"/> -->
            <!-- </DataTrigger> -->
            <Trigger Property="SelectionState" Value="Focused">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderFocusedBrush}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellTextFocusedBrush}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="Selected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextRowSelectedBrush}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="FocusedAndSelected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextFocusedBrush}}"/>
            </Trigger>
            <Trigger Property="RowSelectionState" Value="Focused">
                <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderFocusedBorderBrush}}"/>
            </Trigger>
            <Trigger Property="HasCustomAppearance" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="Highlighted">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=HoverBackground}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=HoverForeground}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="EditorOpacity" Value="0.35"/>
            </Trigger>
            <Trigger Property="IsTreeViewCell" Value="True">
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.LightweightCellEditor}"
           BasedOn="{StaticResource {dxgt:GridRowThemeKey ResourceKey=LightweightCellStyle}}"
           TargetType="dxg:LightweightCellEditor"/>

    <Style x:Key="RowControlBaseStyle" TargetType="dxg:RowControl">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <!--<Setter Property="CellStyle" Value="{StaticResource cellStyle}" />-->
        <Setter Property="CellForegroundBrushes" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellForegroundBrushes}}"/>
        <Setter Property="CellBackgroundBrushes" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBackgroundBrushes}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
        <Setter Property="RowFitBorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
        <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderNoneBrush}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextUnfocusedBrush}}"/>
        <Setter Property="dxg:ToolTipHelper.ShowTooltip" Value="{Binding Path=(dxe:BaseEdit.HasValidationError)}"/>
        <Setter Property="dxg:ToolTipHelper.Content" Value="{Binding Path=(dxe:BaseEdit.ValidationError)}"/>
        <Setter Property="dxg:ToolTipHelper.ContentTemplate" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowToolTipTemplate}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
            <Trigger Property="IsAlternateRow" Value="True">
                <Setter Property="Background" Value="{Binding Path=View.ActualAlternateRowBackground}"/>
            </Trigger>
            <Trigger Property="dxe:BaseEdit.HasValidationError" Value="True">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=ValidationErrorBrush}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="Selected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextRowSelectedBrush}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="Highlighted">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=HoverBackground}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=HoverForeground}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowNewItemTemplate}" TargetType="dxg:RowNewItemControl">
        <Grid x:Name="PART_RootGrid" Background="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderNoneBrush}}">
            <Border x:Name="Background" Background="{TemplateBinding Background}"/>
            <Border x:Name="BottomLine"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0,0,0,1"
                    VerticalAlignment="Bottom"/>
            <Grid x:Name="PART_LayoutPanel"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ShowHorizontalLine" Value="False">
                <Setter Property="Visibility"
                        TargetName="BottomLine"
                        Value="Collapsed"/>
            </Trigger>
            <Trigger Property="ShowBottomLine" Value="True">
                <Setter Property="Visibility"
                        TargetName="BottomLine"
                        Value="Visible"/>
                <Setter Property="BorderBrush"
                        TargetName="BottomLine"
                        Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}"/>
            </Trigger>
            <Trigger Property="FadeSelection" Value="True">
                <Setter Property="Background"
                        TargetName="Background"
                        Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=NewItemRowFadeBorderFocusedBrush}}"/>
            </Trigger>
            <Trigger Property="ShowRowBreak" Value="True">
                <Setter Property="BorderThickness"
                        TargetName="BottomLine"
                        Value="0,0,0,2"/>
                <Setter Property="BorderBrush"
                        TargetName="BottomLine"
                        Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=RowBreakBrush}}"/>
            </Trigger>
            <Trigger Property="FixedRowPosition" Value="Bottom">
                <Setter Property="VerticalAlignment"
                        TargetName="BottomLine"
                        Value="Top"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Background"
                        TargetName="PART_RootGrid"
                        Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource Self}}"/>
                <Setter Property="Background"
                        TargetName="PART_RootGrid"
                        Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="RowControlStyle"
           BasedOn="{StaticResource RowControlBaseStyle}"
           TargetType="{x:Type dxg:RowControl}">
        <Style.Triggers>
            <Trigger Property="SelectionState" Value="Focused">
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextFocusedBrush}}"/>
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}"/>
                <Setter Property="RowFitBorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderFocusedBorderBrush}}"/>
            </Trigger>
            <Trigger Property="ShowVerticalLines" Value="false">
                <Setter Property="RowFitBorderBrush" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowControl}"
           BasedOn="{StaticResource RowControlStyle}"
           TargetType="{x:Type dxg:RowControl}">
        <Setter Property="Template" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowTemplate}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.ExtendedColumnChooserRowControl}"
           BasedOn="{StaticResource RowControlStyle}"
           TargetType="{x:Type dxg:ExtendedColumnChooserRowControl}">
        <Setter Property="Template" Value="{DynamicResource {dxgt:ExtendedColumnChooserThemeKey ResourceKey=RowTemplate}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowNewItemControl}"
           BasedOn="{StaticResource RowControlBaseStyle}"
           TargetType="dxg:RowNewItemControl">
        <Setter Property="Template" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowNewItemTemplate}}"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Style.Triggers>
            <Trigger Property="SelectionState" Value="Focused">
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=TextFocusedBrush}}"/>
                <Setter Property="Background" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=NewItemRowBorderFocusedBrush}}"/>
                <Setter Property="RowFitBorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderFocusedBorderBrush}}"/>
            </Trigger>
            <Trigger Property="ShowVerticalLines" Value="false">
                <Setter Property="RowFitBorderBrush" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowFixedLineSeparatorControl}" TargetType="dxg:RowFixedLineSeparatorControl">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=FixedLineSeparatorTemplate}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowFixedLineSeparatorControl}" TargetType="dxg:GroupRowFixedLineSeparatorControl">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowFixedLineSeparatorTemplate}}"/>
    </Style>

    <Style x:Key="RowIndicatorStyleBase" TargetType="dxg:RowIndicator">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ForegroundBrush}}"/>
        <Setter Property="FocusedContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=FocusedIconTemplate}}"/>
        <Setter Property="ChangedContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ChangedIconTemplate}}"/>
        <Setter Property="NewItemRowContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=NewItemRowIconTemplate}}"/>
        <Setter Property="EditingContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=EditingIconTemplate}}"/>
        <Setter Property="ErrorContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=ErrorIconTemplate}}"/>
        <Setter Property="FocusedErrorContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=FocusedErrorIconTemplate}}"/>
        <Setter Property="AutoFilterRowContentTemplate" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=AutoFilterRowIconTemplate}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowIndicator}"
           BasedOn="{StaticResource ResourceKey=RowIndicatorStyleBase}"
           TargetType="dxg:RowIndicator">
        <Setter Property="Template" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=RowIndicatorTemplate}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowIndicator}"
           BasedOn="{StaticResource ResourceKey=RowIndicatorStyleBase}"
           TargetType="dxg:GroupRowIndicator">
        <Setter Property="Template" Value="{DynamicResource {dxgt:RowIndicatorThemeKey ResourceKey=GroupRowIndicatorTemplate}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowDetailsControl}" TargetType="dxg:RowDetailsControl">
        <Setter Property="Template" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowDetailsTemplate}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.UpdateRowButtonsControl}" TargetType="dxg:UpdateRowButtonsControl">
        <Setter Property="Template" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=UpdateRowButtonsControlTemplate}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
        <Setter Property="FocusManager.IsFocusScope" Value="{Binding View.IsEditing}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowControl}" TargetType="dxg:GroupRowControl">
        <Setter Property="FocusOffset" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey= GroupRowFocusOffset}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}"/>
        <Setter Property="BottomLineMargin" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBottomLineThickness}}"/>
        <Setter Property="RowFitBorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
        <Setter Property="Background" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBackground}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowFontWeight}}"/>
        <Setter Property="Template" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowLightweightTemplate}}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowForeground}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.HasBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:AppearanceOptions.Background), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.HasDataAreaBackground), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Background" Value="{Binding Path=(dxg:GridControl.ActiveView).DataControl.(dxcn:GridAppearanceOptions.DataAreaBackground), RelativeSource={RelativeSource Self}}"/>
            </DataTrigger>
            <Trigger Property="SelectionState" Value="Selected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBackgroundSelected}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="Focused">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBackgroundFocused}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowFocusForeground}}"/>
                <Setter Property="RowFitBorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderFocusedBorderBrush}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="Highlighted">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowHoverBackground}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowHoverForeground}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupCardRowControl}" TargetType="dxg:GroupCardRowControl">
        <Setter Property="FocusOffset" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey= GroupRowFocusOffset}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}"/>
        <Setter Property="BottomLineMargin" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBottomLineThickness}}"/>
        <Setter Property="RowFitBorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
        <Setter Property="Background" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBackground}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowFontWeight}}"/>
        <Setter Property="Template" Value="{DynamicResource {dxgt:CardViewThemeKey ResourceKey=GroupRowLightweightTemplate}}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowForeground}}"/>
        <Style.Triggers>
            <Trigger Property="SelectionState" Value="Selected">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBackgroundSelected}}"/>
            </Trigger>
            <Trigger Property="SelectionState" Value="Focused">
                <Setter Property="Background" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBackgroundFocused}}"/>
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowFocusForeground}}"/>
                <Setter Property="RowFitBorderBrush" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=CellBorderFocusedBorderBrush}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowCheckBoxSelector}" TargetType="dxg:GroupRowCheckBoxSelector">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <dxe:CheckEdit x:Name="PART_CheckBoxRowSelector"
                                   Focusable="False"
                                   IsChecked="{Binding AllItemsSelected, Mode=TwoWay}"
                                   IsEnabled="{Binding EnabledSelected}"
                                   IsReadOnly="{Binding View.HasValidationError}"
                                   Margin="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=CheckBoxSelectorMargin}}"
                                   Padding="0"
                                   VerticalAlignment="Center">
                        <dxg:GridViewHitInfoBase.HitTestAcceptor>
                            <dxght:GroupRowCheckBoxTableViewHitTestAcceptor/>
                        </dxg:GridViewHitInfoBase.HitTestAcceptor>
                    </dxe:CheckEdit>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding View.ActualShowCheckBoxInGroupRow}" Value="True">
                            <Setter Property="IsEnabled"
                                    TargetName="PART_CheckBoxRowSelector"
                                    Value="True"/>
                            <Setter Property="Visibility"
                                    TargetName="PART_CheckBoxRowSelector"
                                    Value="Visible"/>
                            <Setter Property="IsReadOnly"
                                    TargetName="PART_CheckBoxRowSelector"
                                    Value="False"/>
                            <Setter Property="IsChecked"
                                    TargetName="PART_CheckBoxRowSelector"
                                    Value="{Binding IsChecked, Mode=TwoWay}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowExpandButton}" TargetType="dxg:GroupRowExpandButton">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowExpandButtonMargin}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GroupRowExpandButton">
                    <dxg:GridToggleStateButton x:Name="PART_ToggleButton"
                                               ClickMode="Press"
                                               Command="{TemplateBinding Command}"
                                               CommandParameter="{TemplateBinding CommandParameter}"
                                               Foreground="{TemplateBinding Foreground}"
                                               IsChecked="{TemplateBinding IsChecked}"
                                               Style="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=ExpandButtonStyle}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupValuePresenter}" TargetType="dxg:GroupValuePresenter">
        <Setter Property="Margin" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupValuePresenterMargin}}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GroupValuePresenter">
                    <StackPanel x:Name="PART_GroupValuesPanel"
                                Margin="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowContentMargin}}"
                                Orientation="Horizontal"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowDefaultSummaryControl}" TargetType="dxg:GroupRowDefaultSummaryControl">
        <Setter Property="Margin" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowDefaultSummaryPadding}}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowDefaultSummaryItemControl}" TargetType="dxg:GroupRowDefaultSummaryItemControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GroupRowDefaultSummaryItemControl">
                    <TextBlock Text="{TemplateBinding Text}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Margin" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowDefaultSummaryMargin}}"/>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.GroupRowColumnSummaryControl}" TargetType="dxg:GroupRowColumnSummaryControl">
        <Setter Property="BorderBrushes" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowColumnSummaryBrushes}}"/>
        <Setter Property="Padding" Value="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupColumnSummaryPadding}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GroupRowColumnSummaryControl">
                    <Border Name="PART_Border"
                            Background="{TemplateBinding Background}"
                            Margin="{DynamicResource {dxgt:GroupRowThemeKey ResourceKey=GroupRowBottomLineThickness}}"
                            Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
                <Setter Property="Padding" Value="12"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Grid.RowNewItemTextControl}" TargetType="dxg:RowNewItemTextControl">
        <Setter Property="Template" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowNewItemTextControlTemplate}}"/>
        <Setter Property="Panel.ZIndex" Value="1"/>
    </Style>

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=UpdateRowButtonsControlTemplate}" TargetType="dxg:UpdateRowButtonsControl">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="0,1,0,0"
                    Margin="0,-1,0,0"/>
            <Border Background="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=UpdateRowButtonsControlBackground}}">
                <dx:DataContentPresenter x:Name="Content"
                                         Grid.Row="1"
                                         Margin="12"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=View.ShowHorizontalLines}" Value="False">
                <Setter Property="BorderThickness"
                        TargetName="Border"
                        Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=ActualHeight, ElementName=Content}" Value="0">
                <Setter Property="BorderThickness"
                        TargetName="Border"
                        Value="0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:GridControlThemeKey ResourceKey=ContentWaitIndicatorTemplate}">
        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
            <ContentPresenter x:Name="content" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
            <Grid x:Name="root"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Visibility="Collapsed">
                <ProgressBar x:Name="progressBar"
                             BorderBrush="{x:Null}"
                             Foreground="{x:Null}"
                             Height="16"
                             HorizontalAlignment="Center"
                             IsEnabled="True"
                             IsIndeterminate="True"
                             MinHeight="4"
                             MinWidth="4"
                             Template="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=ButtonWaitIndicator}}"
                             VerticalAlignment="Center"
                             Width="16"/>
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="Visibility">
                    <VisualState x:Name="Visible">
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.1"
                                             Duration="0:0:0.1"
                                             From="1"
                                             Storyboard.TargetName="content"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"/>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="root" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Hidden</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <sys:Boolean>True</sys:Boolean>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Collapsed">
                        <Storyboard>
                            <DoubleAnimation BeginTime="0:0:0.1"
                                             Duration="0:0:0.1"
                                             From="1"
                                             Storyboard.TargetName="root"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"/>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="root" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.2">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Collapsed</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="content" Storyboard.TargetProperty="Visibility">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.2">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Visibility>Visible</Visibility>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="progressBar" Storyboard.TargetProperty="IsIndeterminate">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1">
                                    <DiscreteObjectKeyFrame.Value>
                                        <sys:Boolean>False</sys:Boolean>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>

    <DataTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=DefaultUpdateRowButtonsControlTemplate}">
        <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
            <Grid Margin="0,0,6,0">
                <Button Command="{Binding View.Commands.UpdateRow}" TabIndex="0">
                    <Button.Content>
                        <dx:WaitIndicator x:Name="updateWaitIndicator"
                                          DeferedVisibility="{Binding Path=IsWaitIndicatorVisible}"
                                          IsHitTestVisible="False"
                                          IsTabStop="False"
                                          Template="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=ContentWaitIndicatorTemplate}}">
                            <dx:WaitIndicator.Content>
                                <Binding Path="IsNewItemRow">
                                    <Binding.Converter>
                                        <mvvm:BooleanToObjectConverter FalseValue="{dxg:GridControlStringId UpdateRowButtonsUpdate}" TrueValue="{dxg:GridControlStringId UpdateRowButtonsAdd}"/>
                                    </Binding.Converter>
                                </Binding>
                            </dx:WaitIndicator.Content>
                        </dx:WaitIndicator>
                    </Button.Content>
                </Button>
                <dx:WaitIndicator DeferedVisibility="{Binding Path=IsWaitIndicatorVisible}"
                                  HorizontalAlignment="Stretch"
                                  IsHitTestVisible="False"
                                  IsTabStop="False"
                                  Template="{DynamicResource {dxgt:GridControlThemeKey ResourceKey=ContentWaitIndicatorTemplate}}"
                                  VerticalAlignment="Stretch"/>
            </Grid>
            <Button Command="{Binding View.Commands.CancelRowChanges}"
                    Content="{dxg:GridControlStringId UpdateRowButtonsCancel}"
                    TabIndex="1"/>
        </StackPanel>
    </DataTemplate>

</ResourceDictionary>