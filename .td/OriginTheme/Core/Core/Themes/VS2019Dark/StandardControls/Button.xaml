<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:cs="colorscheme_ignorable_uri" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <ResourceDictionary.MergedDictionaries>
    <dxt:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2019Dark.v20.2;component/Core/Core/Themes/UICore.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <!-- General -->
  <ControlTemplate x:Key="{dxt:ButtonThemeKey ResourceKey=LightweightTemplate}" TargetType="{x:Type ButtonBase}">
    <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
      <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" TargetName="border" Value="#FF3E3E40" cs:id="Setter_0000" />
        <Setter Property="BorderBrush" TargetName="border" Value="#FF3F3F46" cs:id="Setter_0001" />
      </Trigger>
      <Trigger Property="ToggleButton.IsChecked" Value="true">
        <Setter Property="Background" TargetName="border" Value="#FF007ACC" cs:id="Setter_0002" />
        <Setter Property="BorderBrush" TargetName="border" Value="#FF3F3F46" cs:id="Setter_0003" />
      </Trigger>
      <Trigger Property="IsPressed" Value="true">
        <Setter Property="Background" TargetName="border" Value="#FF007ACC" cs:id="Setter_0004" />
        <Setter Property="BorderBrush" TargetName="border" Value="#FF3F3F46" cs:id="Setter_0005" />
      </Trigger>
      <Trigger Property="IsFocused" Value="true">
        <Setter Property="BorderBrush" TargetName="border" Value="#FF007ACC" cs:id="Setter_0006" />
      </Trigger>
      <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" TargetName="border" Value="{StaticResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=ButtonOpacity}}" />
      </Trigger>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="true">
        <Setter Property="MinWidth" TargetName="border" Value="44" />
        <Setter Property="MinHeight" TargetName="border" Value="44" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=System.Windows.Controls.Button}" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="#FF333337" cs:id="Setter_0000" />
    <Setter Property="BorderBrush" Value="#FF3F3F46" cs:id="Setter_0001" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" />
    <Setter Property="Padding" Value="11,2,11,2" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=LightweightTemplate}}" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,12,14,12" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </Trigger>
      <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
        <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=System.Windows.Controls.Primitives.ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type ToggleButton}">
    <Setter Property="Background" Value="#FF333337" cs:id="Setter_0000" />
    <Setter Property="BorderBrush" Value="#FF3F3F46" cs:id="Setter_0001" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" cs:id="Setter_0006" />
    <Setter Property="Padding" Value="11,2,11,2" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=LightweightTemplate}}" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,12,14,12" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" cs:id="Setter_0002" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" cs:id="Setter_0003" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" cs:id="Setter_0004" />
      </Trigger>
      <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
        <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=ButtonBaseControlTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=System.Windows.Controls.Primitives.RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}" TargetType="{x:Type RepeatButton}">
    <Setter Property="Background" Value="#FF333337" cs:id="Setter_0000" />
    <Setter Property="BorderBrush" Value="#FF3F3F46" cs:id="Setter_0001" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" />
    <Setter Property="Padding" Value="11,2,11,2" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=LightweightTemplate}}" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,12,14,12" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </Trigger>
      <Trigger Property="dx:CompatibilityOptions.UseLightweightTemplatesInStandardButtons" Value="false">
        <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=ButtonBaseControlTemplate}}" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="simpleButtonBaseStyle" TargetType="{x:Type dx:SimpleButton}">
    <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}" />
    <Setter Property="GlyphToContentOffset" Value="5" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DropDownButton}" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:DropDownButton}">
    <Setter Property="ArrowAlignment" Value="Right" />
    <Setter Property="ArrowPadding" Value="0,3,10,3" />
    <!-- <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}"/> -->
    <!-- <Setter Property="GlyphToContentOffset" Value="5"/> -->
    <!-- <Setter Property="HorizontalContentAlignment" Value="Center"/> -->
    <Setter Property="Padding" Value="10,3,10,3" />
    <Setter Property="Template" Value="{DynamicResource {dxt:DropDownButtonThemeKey ResourceKey=DropDownButtonTemplate}}" />
    <!-- <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}"/> -->
    <!-- <Setter Property="VerticalContentAlignment" Value="Center"/> -->
    <!-- <Setter Property="FocusVisualStyle" Value="{x:Null}"/> -->
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="ArrowPadding" Value="0,13,27,13" />
        <Setter Property="Padding" Value="14,13,14,13" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </Trigger>
      <Trigger Property="ButtonKind" Value="Repeat">
        <Setter Property="ClickMode" Value="Press" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.SplitButton}" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SplitButton}">
    <Setter Property="ArrowAlignment" Value="Right" />
    <Setter Property="ArrowPadding" Value="10,3,10,3" />
    <!-- <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}"/> -->
    <!-- <Setter Property="GlyphToContentOffset" Value="5"/> -->
    <!-- <Setter Property="HorizontalContentAlignment" Value="Center"/> -->
    <Setter Property="Padding" Value="10,3,10,3" />
    <Setter Property="ArrowBorderThickness" Value="1" />
    <Setter Property="SeparatorThickness" Value="1" />
    <Setter Property="Template" Value="{DynamicResource {dxt:DropDownButtonThemeKey ResourceKey=SplitButtonTemplate}}" />
    <!-- <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}"/> -->
    <!-- <Setter Property="VerticalContentAlignment" Value="Center"/> -->
    <!-- <Setter Property="FocusVisualStyle" Value="{x:Null}"/> -->
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,11,14,11" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
          <Condition Property="IsMouseOverArrow" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="IsPressed" Value="True" />
          <Condition Property="IsMouseOverArrow" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </MultiTrigger>
      <Trigger Property="ButtonKind" Value="Repeat">
        <Setter Property="ClickMode" Value="Press" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.SimpleButton}" BasedOn="{StaticResource simpleButtonBaseStyle}" TargetType="{x:Type dx:SimpleButton}">
    <!-- <Setter Property="FocusVisualStyle" Value="{x:Null}"/> -->
    <!-- <Setter Property="BorderThickness" Value="1"/> -->
    <!-- <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=Foreground}}"/> -->
    <!-- <Setter Property="GlyphToContentOffset" Value="5"/> -->
    <!-- <Setter Property="HorizontalContentAlignment" Value="Center"/> -->
    <!-- <Setter Property="VerticalContentAlignment" Value="Center"/> -->
    <Setter Property="Padding" Value="10,3,10,3" />
    <Setter Property="Template" Value="{DynamicResource {dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}" />
    <!-- <Setter Property="dx:WpfSvgPalette.Palette" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=ContrastSvgPalette}}"/> -->
    <Style.Triggers>
      <Trigger Property="dx:ThemeManager.IsTouchEnabled" Value="True">
        <Setter Property="Padding" Value="14,13,14,13" />
      </Trigger>
      <Trigger Property="Content" Value="{x:Null}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="GlyphToContentOffset" Value="0" />
      </Trigger>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsMouseOver" Value="True" />
          <Condition Property="ToggleButton.IsChecked" Value="False" />
          <Condition Property="IsPressed" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=MouseOverForeground}}" />
      </MultiTrigger>
      <Trigger Property="ToggleButton.IsChecked" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=CheckedForeground}}" />
      </Trigger>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource ResourceKey={dxt:DropDownButtonThemeKey ResourceKey=PressedForeground}}" />
      </Trigger>
      <Trigger Property="ButtonKind" Value="Repeat">
        <Setter Property="ClickMode" Value="Press" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <!--ThemedWindowDialogButtonStyle-->
  <Style x:Key="{dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.ThemedWindowDialogButton}" BasedOn="{StaticResource {dxt:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.SimpleButton}}" TargetType="{x:Type dx:ThemedWindowDialogButton}">
    <Setter Property="MinHeight" Value="22" />
    <Setter Property="MinWidth" Value="70" />
    <Setter Property="AutomationProperties.AutomationId" Value="{Binding Path=Content, RelativeSource={RelativeSource Self}, Converter={dx:ThemedDialogButtonNameConverter}, FallbackValue={x:Static sys:String.Empty}, TargetNullValue={x:Static sys:String.Empty}}" />
    <Setter Property="AutomationProperties.Name" Value="{Binding Path=Content, RelativeSource={RelativeSource Self}, FallbackValue={x:Static sys:String.Empty}, TargetNullValue={x:Static sys:String.Empty}}" />
  </Style>
</ResourceDictionary>